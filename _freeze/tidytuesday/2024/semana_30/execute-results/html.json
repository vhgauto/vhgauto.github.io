{
  "hash": "15ea726a140142785c6493b01e4b1842",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Semana 30\"\nsubtitle: \"Figura semana 30\"\nauthor: Víctor Gauto\ndate: \"2024-07-29\"\neditor_options:\n  chunk_output_type: console\ncategories: [geom_smooth, geom_point, geom_richtext, geom_point_svg]\nimage: https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2024/s30/viz.png\nexecute:\n  eval: false\n  echo: true\ncode-fold: true\n---\n\n\n\n\nAudiencia de <b>American Idol</b>.\n\n# Script\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# paquetes ----------------------------------------------------------------\n\nlibrary(glue)\nlibrary(ggtext)\nlibrary(showtext)\nlibrary(ggarchery)\nlibrary(ggsvg)\nlibrary(tidyverse)\n\n# fuente ------------------------------------------------------------------\n\n# colores\nc1 <- \"#399483\"\nc2 <- \"#B54EA3\"\nc3 <- \"#F2FBFC\"\nc4 <- \"black\"\nc5 <- \"#00186D\"\nc6 <- \"#06C7FF\"\n\n# fuente: Ubuntu\nfont_add(\n  family = \"ubuntu\", \n  regular = \"fuente/Ubuntu-Regular.ttf\",\n  bold = \"fuente/Ubuntu-Bold.ttf\",\n  italic = \"fuente/Ubuntu-Italic.ttf\")\n\n# monoespacio & íconos\nfont_add(\n  family = \"jet\", \n  regular = \"fuente/JetBrainsMonoNLNerdFontMono-Regular.ttf\")\n\n# bebas neue\nfont_add(\n  family = \"bebas\",\n  regular = \"fuente/BebasNeue-Regular.ttf\"\n)\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n# caption\nfuente <- glue(\n  \"Datos: <span style='color:{c2};'><span style='font-family:jet;'>\",\n  \"{{<b>tidytuesdayR</b>}}</span> semana {30}, \",\n  \"artículo <b>American Idol</b> en Wikipedia.</span>\")\nautor <- glue(\"<span style='color:{c2};'>**Víctor Gauto**</span>\")\nicon_twitter <- glue(\"<span style='font-family:jet;'>&#xf099;</span>\")\nicon_instagram <- glue(\"<span style='font-family:jet;'>&#xf16d;</span>\")\nicon_github <- glue(\"<span style='font-family:jet;'>&#xf09b;</span>\")\nicon_mastodon <- glue(\"<span style='font-family:jet;'>&#xf0ad1;</span>\")\nusuario <- glue(\"<span style='color:{c2};'>**vhgauto**</span>\")\nsep <- glue(\"**|**\")\n\nmi_caption <- glue(\n  \"{fuente}<br>{autor} {sep} {icon_github} {icon_twitter} {icon_instagram} \",\n  \"{icon_mastodon} {usuario}\")\n\n# datos -------------------------------------------------------------------\n\ntuesdata <- tidytuesdayR::tt_load(2024, 30)\nratings <- tuesdata$ratings\n\n# me interesa la audiencia en todas las temporadas, y si aumenta/baja la \n# audiencia con los episodios\n\nd <- ratings |> \n  select(season, show_number, airdate, viewers_in_millions) |> \n  mutate(fecha_X = mdy(airdate)) |> \n  mutate(airdate = if_else(\n    is.na(fecha_X),\n    glue(\"{airdate}, 2014\"),\n    airdate\n  )) |> \n  mutate(fecha = mdy(airdate)) |> \n  select(-fecha_X) |> \n  drop_na(viewers_in_millions) |> \n  mutate(año = year(fecha))\n\n# el aumento/baja de la audiencia con los episodios lo defino con la pendiente\n# positiva/negativa de un modelos lineal: audiencia = f(episodios)\nd_mod <- d |> \n  mutate(año = year(fecha)) |> \n  nest(.by = año) |> \n  mutate(mod = map(.x = data, ~lm(viewers_in_millions ~ fecha, data = .x))) |> \n  mutate(\n    mod = map(mod, broom::tidy)\n  ) |> \n  unnest(mod) |> \n  filter(term == \"fecha\") |> \n  mutate(sube = if_else(\n    estimate > 0,\n    c1,\n    c2\n  ))\n\n# identifico las temporadas más populares\nd |> \n  mutate(año = year(fecha)) |> \n  reframe(\n    viewers_in_millions = median(viewers_in_millions),\n    fecha = mean(fecha),\n    .by = c(año, season)\n  ) |> \n  arrange(desc(viewers_in_millions))\n\n\n# combino fechas y audiencias con pendientes del modelo lineal\nd2 <- inner_join(d, d_mod, by = join_by(año)) |> \n  select(any_of(names(d)), sube)\n\n# número de temporada ubicado debajo y en el medio de cada conjunto\nd_season <- d |> \n  mutate(año = year(fecha)) |> \n  reframe(\n    fecha = mean(fecha),\n    .by = c(season, año)\n  ) |> \n  mutate(\n    label = if_else(\n      season < 10,\n      glue(\"T0{season}\"),\n      glue(\"T{season}\")\n    )\n  ) |> \n  inner_join(d2, by = join_by(season, año)) |> \n  rename(fecha = fecha.x) |> \n  reframe(\n    fecha = median(fecha),\n    viewers_in_millions = min(viewers_in_millions)-.6,\n    .by = c(label, sube)\n  )\n\n# 1er programa\nfecha_1 <- d |> \n  slice(1) |> \n  pull(fecha) |> \n  format(\"%d de %B de %Y\")\n\nfecha_1_label <- glue(\n  \"El 1<sup>er</sup> programa se emite<br>\",\n  \"el {fecha_1}.\"\n)\n\n# figura ------------------------------------------------------------------\n\n# título de eje vertical y subtítulo\ntitulo_y <- \"Espectadores<br><span style='font-size:17px'>(en millones)</span>\"\n\nmi_subtitulo <- glue(\n  \"La popularidad de <b style='color:{c6}'>AMERICAN IDOL</b> tuvo su máximo en\",\n  \"las temporadas <b>5</b> y <b>6</b>. Por lo general, la audiencia\",\n  \"<b style='color:{c2}'>disminuye</b> con el progreso de los episodios.\",\n  \"Únicamente en 3 temporadas (1, 2 y 17) la popularidad fue en\",\n  \"<b style='color:{c1}'>aumento</b>.\",\n  .sep = \" \"\n)\n\n# logo (.svg) de American Idol\nsvg_url <- \n  \"https://upload.wikimedia.org/wikipedia/commons/8/87/American_Idol_logo.svg\"\nsvg_txt <- paste(readLines(svg_url), collapse = \"n\")\n\n# figura\ng <- ggplot(d2, aes(fecha, viewers_in_millions)) +\n  # tendencia\n  geom_smooth(\n    se = FALSE, color = alpha(c1, .3), method = loess, formula = y ~ x,\n    linetype = 1, linewidth = 4, lineend = \"round\") +\n  geom_smooth(\n    se = FALSE, color = alpha(c2, .3), method = loess, formula = y ~ x,\n    linetype = \"33\", linewidth = 4) +\n  # puntos\n  geom_point(\n    fill = d2$sube, shape = 21, size = 4, color = c4, alpha = .8) +\n  # temporadas\n  geom_richtext(\n    data = d_season, aes(fecha, viewers_in_millions, label = label), size = 6,\n    family = \"bebas\", vjust = 1, fill = d_season$sube, color = c3,\n    label.padding = unit(0.2, \"lines\"), label.colour = c4, \n    label.r = unit(0, \"mm\")\n  ) +\n  # American Idol logo\n  geom_point_svg(\n    x = ymd(20210101),y = 40, svg = svg_txt, size = 45, hjust = 1, vjust = 1) +\n  # 1er programa\n  annotate(\n    geom = \"richtext\", x = d_season$fecha[1]-months(5),\n    y = d_season$viewers_in_millions[1]-1, label = fecha_1_label, fill = c3,\n    label.color = NA, family = \"ubuntu\", size = 5, hjust = 0, vjust = 1,\n    color = c5\n  ) +\n  scale_x_date(\n    date_breaks = \"1 year\", date_labels = \"'%y\", position = \"bottom\",\n    limits = ymd(20020101, 20210101), expand = c(0, 0)) +\n  scale_y_continuous(\n    breaks = seq(5, 40, 5),\n    limits = c(3, 40),\n    expand = c(0, 0)) +\n  labs(x = NULL, y = titulo_y, subtitle = mi_subtitulo, caption = mi_caption) +\n  theme_linedraw() +\n  theme(\n    aspect.ratio = 1,\n    plot.margin = margin(r = 34, l = 14),\n    plot.background = element_rect(\n      fill = c3, color = c5, linewidth = 3),\n    plot.subtitle = element_textbox_simple(\n      family = \"ubuntu\", size = 19, color = c5,\n      margin = margin(b = 10, t = 14.2)),\n    plot.caption = element_markdown(\n      family = \"ubuntu\", size = 13, color = c1, \n      margin = margin(t = 20, b = 10)),\n    panel.background = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(linetype = \"FF\"),\n    axis.line = element_blank(),\n    axis.ticks = element_blank(),\n    axis.text.x = element_text(\n      family = \"bebas\", size = 27, color = c5),\n    axis.text.y = element_text(family = \"jet\", size = 15, color = c5),\n    axis.title.y = element_markdown(\n      family = \"ubuntu\", size = 20, color = c5),\n    legend.position = \"none\"\n  )\n\n# guardo\nggsave(\n  plot = g,\n  filename = \"2024/s30/viz.png\",\n  width = 30,\n  height = 32,\n  units = \"cm\")\n\n# abro\nbrowseURL(\"2024/s30/viz.png\")\n```\n:::\n\n\n\n\n# Figura\n\n![](https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2024/s30/viz.png)\n\n\n",
    "supporting": [
      "semana_30_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}