{
  "hash": "a34887aef8918deb4aad46dda9893f1e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Semana 52\"\nsubtitle: \"Figura semana 52\"\nauthor: Víctor Gauto\ndate: \"2024-12-30\"\neditor_options:\n  chunk_output_type: console\ncategories: [geom_blank, geom_tile, geom_text]\nimage: https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2024/s52/viz.png\nexecute:\n  eval: false\n  echo: true\ncode-fold: true\n---\n\n\n\n\n\n# Script\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# paquetes ----------------------------------------------------------------\n\nlibrary(glue)\nlibrary(ggtext)\nlibrary(showtext)\nlibrary(ggrepel)\nlibrary(patchwork)\nlibrary(tidyverse)\n\n# fuente ------------------------------------------------------------------\n\n# colores\nc1 <- \"#1A318B\"\nc2 <- \"#6996E3\"\nc3 <- \"#EAF3FF\"\nc4 <- \"grey20\"\nc5 <- \"#E9AB1B\"\nc6 <- \"white\"\n\n# fuente: Ubuntu\nfont_add(\n  family = \"ubuntu\",\n  regular = \"fuente/Ubuntu-Regular.ttf\",\n  bold = \"fuente/Ubuntu-Bold.ttf\",\n  italic = \"fuente/Ubuntu-Italic.ttf\"\n)\n\n# monoespacio & íconos\nfont_add(\n  family = \"jet\",\n  regular = \"fuente/JetBrainsMonoNLNerdFontMono-Regular.ttf\"\n)\n\n# Bebas Neue\nfont_add(\n  family = \"bebas\",\n  regular = \"fuente/BebasNeue-Regular.ttf\"\n)\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n# caption\nfuente <- glue(\n  \"Datos: <span style='color:{c1};'><span style='font-family:jet;'>\",\n  \"{{<b>tidytuesdayR</b>}}</span> semana {52}<br>\",\n  \"Lai, S., Sorichetta, A., Steele, J. <i>et al</i>. **Global holiday datasets\n  for <br>understanding seasonal human mobility and population dynamics**.</span>\"\n)\nautor <- glue(\"<span style='color:{c1};'>**Víctor Gauto**</span>\")\nicon_twitter <- glue(\"<span style='font-family:jet;'>&#xf099;</span>\")\nicon_instagram <- glue(\"<span style='font-family:jet;'>&#xf16d;</span>\")\nicon_github <- glue(\"<span style='font-family:jet;'>&#xf09b;</span>\")\nicon_mastodon <- glue(\"<span style='font-family:jet;'>&#xf0ad1;</span>\")\nicon_bsky <- glue(\"<span style='font-family:jet;'>&#xe28e;</span>\")\nusuario <- glue(\"<span style='color:{c1};'>**vhgauto**</span>\")\nsep <- glue(\"**|**\")\n\nmi_caption <- glue(\n  \"{fuente}<br>{autor} {sep} {icon_github} {icon_twitter} {icon_instagram} \",\n  \"{icon_mastodon} {icon_bsky} {usuario}\"\n)\n\n# datos -------------------------------------------------------------------\n\ntuesdata <- tidytuesdayR::tt_load(2024, 52)\nglobal_holidays <- tuesdata$global_holidays\n\n# me interesa la frecuencia de veces que cada día del año es feriado/celebración\n\nd <- global_holidays |>\n  select(Date) |>\n  mutate(dia = day(Date)) |>\n  mutate(mes = month(Date)) |>\n  mutate(año = year(Date)) |>\n  reframe(\n    n = n(),\n    .by = c(mes, dia, año)\n  ) |>\n  arrange(mes, dia, año) |>\n  mutate(fecha = make_date(year = 2016, month = mes, day = dia)) |>\n  mutate(prop = n/length(unique(global_holidays$ADM_name))) |>\n  reframe(\n    prop = mean(prop),\n    .by = fecha\n  )\n\n# día más frecuente de cada mes\ntop_mes <- d |>\n  mutate(mes = month(fecha)) |>\n  slice_max(order_by = prop, n = 1, by = mes)\n\nlabel_tbl <- inner_join(\n  global_holidays, top_mes, by = join_by(Date == fecha)\n) |>\n  distinct(Date, Name) |>\n  arrange(Date) |>\n  distinct(Date, .keep_all = TRUE) |>\n  rename(\"fecha\" = Date) |>\n  inner_join(d, by = join_by(fecha))\n\n# combino todos los días con las celebraciones más frecuentes del mes\nd2 <- full_join(d, label_tbl, by = join_by(fecha, prop))\n\n# todas las fechas\nfecha <- tibble(\n    dia_fecha = seq.Date(\n      from = ymd(20160101), to = ymd(20161231), by = \"1 day\"\n    )\n  )\n\n# vector de factores de los meses\nmes_orden <- tibble(\n    mes = seq.Date(from = ymd(20160101), to = ymd(20161231), by = \"1 month\")) |>\n    mutate(mes_n = format(mes, \"%B\")) |>\n    mutate(mes_n = toupper(mes_n)) |>\n    mutate(mes_n = fct_inorder(mes_n)) |>\n    pull(mes_n)\n\n# tibble calendario\ncalendar_df <- fecha |>\n  mutate(\n    año = year(dia_fecha),\n    mes = format(dia_fecha, \"%B\"),\n    # inicio de semana el DOMINGO\n    dia = wday(dia_fecha, label = TRUE, week_start = 7),\n    mday = mday(dia_fecha),\n    # agrego el número de semana, dentro del mes\n    mes_semana = (5 + day(dia_fecha) +\n                    wday(\n                      floor_date(dia_fecha, 'month'), week_start = 7\n                    )) %/% 7\n  ) |>\n  mutate(mes = toupper(mes)) |>\n  mutate(mes = fct_inorder(mes)) |>\n  inner_join(d2, by = join_by(dia_fecha == fecha))\n\n# celebraciones más frecuentes de cada mes y traducciones\nceleb <- calendar_df |> \n  distinct(Name) |> \n  drop_na() |> \n  pull() |> \n  sort()\n\nceleb_trad <- c(\n  \"Día de Todos los Santos\", \"Asunción de María\", \"Día del Niño\", \"Navidad\",\n  \"Viernes Santo\", \"Halloween\", \"Día del Empleado Bancario\",\n  \"Día Internacional de la Mujer\", \"Día Internacional de los Trabajadores\",\n  \"Año Nuevo\", \"Eid al-Adha\", \"Día de los Enamorados\"\n)\n\nceleb_trad <- set_names(celeb_trad, celeb)\n\ncalendar_df <- calendar_df |> \n  mutate(nombre = celeb_trad[Name])\n\n# nombres de los días de la semana\ndia_semana <- tibble(\n    label = c(\"D\", \"L\", \"M\", \"M\", \"J\", \"V\", \"S\"),\n    x = 1:7,\n    y = 1\n  )\n\n# blanco\nb <- tibble(x = 0, y = c(0, 7))\n\nferiados <- drop_na(calendar_df)\n\n# figura ------------------------------------------------------------------\n\n# cantidad de países y subtítulo\nn_pais <- length(unique(global_holidays$ISO3))\n\nmi_subtitulo <- glue(\n  \"Porcentaje de veces que cada día del año fue feriado/celebración en \n  **{n_pais}** países, entre **2010** y **2019**. En cada mes se destaca la \n  fecha más frecuente.\"\n)\n\n# función p/generar el calendario de c/mes\nf_cumple <- function(x) {\n  n <- calendar_df |>\n    filter(mes == x) |>\n    nrow()\n  \n  m <- calendar_df |>\n    filter(mes == x) |>\n    filter(Name != \"\") |>\n    pull(Name)\n  \n  u <- calendar_df |>\n    filter(mes == x) |>\n    summarise(semana_max = max(mes_semana)) |>\n    pull()\n  \n  fer <- calendar_df |>\n    filter(mes == x) |>\n    slice_max(order_by = prop, n = 1)\n  \n  g <- calendar_df |>\n    filter(mes == x) |>\n    ggplot(aes(x = dia, y = mes_semana, fill = prop)) +\n    # límites verticales\n    geom_blank(aes(y = 0)) +\n    geom_blank(aes(y = 7)) +\n    # coloreo los cumpleaños\n    geom_tile(colour = c3, linewidth = 1, show.legend = TRUE) +\n    # agrego los días del mes\n    geom_text(\n      aes(label = mday), family = \"jet\", hjust = .5, nudge_y = .2, size = 3,\n      color = c6\n    ) +\n    # día de la semana\n    geom_text(\n      data = dia_semana, aes(x, y, label = label), inherit.aes = FALSE,\n      nudge_y = 1, family = \"jet\", color = c2, size = 3\n    ) +\n    # celebraciones/feriados\n    geom_text(\n      data = fer, aes(label = nombre, x = 4.5, y = 6.5), hjust = .5, size = 4,\n      family = \"ubuntu\", fontface = \"plain\"\n    ) +\n    geom_tile(data = fer, color = c2, fill = NA, linewidth = 1) +\n    geom_tile(data = fer, color = c1, fill = NA, linewidth = 1, linetype = \"11\") +\n    # manual\n    scale_y_continuous(trans = \"reverse\") +\n    scale_fill_gradientn(\n      colors = hcl.colors(5, \"Zissou1\"),\n      limits = c(0, 1),\n      labels = scales::label_percent()\n    ) +\n    # faceta\n    facet_grid(año ~ mes, switch = \"y\") +\n    # eje\n    labs(fill = NULL) +\n    coord_fixed(clip = \"off\", expand = FALSE) +\n    theme_void() +\n    theme(\n      plot.margin = margin(8, 5, 5, 5),\n      plot.background = element_rect(fill = NA, color = NA),\n      strip.text.x.top = element_text(\n        family = \"bebas\", color = c1, face = \"bold\", size = 20,\n        margin = margin(b = 10)\n      ),\n      strip.text.y.left = element_blank(),\n      legend.position = \"bottom\",\n      legend.direction = \"horizontal\",\n      legend.key.width = unit(40, \"pt\"),\n      legend.text = element_text(family = \"jet\")\n    )\n}\n\n# lista de figuras\nlista_mes <- map(.x = mes_orden, ~ f_cumple(x = .x))\n\ng_cumple <- wrap_plots(lista_mes, ncol = 4) +\n  plot_layout(guides = \"collect\") +\n    plot_annotation(\n      subtitle = mi_subtitulo,\n      caption = mi_caption,\n      theme = theme(\n        plot.margin = margin(20, 19, 19, 19),\n        plot.background = element_rect(\n          fill = c3, color = c5, linewidth = 3\n        ),\n        plot.subtitle = element_textbox_simple(\n          hjust = .5, size = 20, family = \"ubuntu\"\n        ),\n        plot.caption = element_markdown(\n          family = \"ubuntu\", size = 11, color = c4, hjust = 1, lineheight = 1.3,\n          margin = margin(t = 10)\n        ),\n        legend.position = \"bottom\"\n      )\n    )\n\n# guardo\nggsave(\n  plot = g_cumple,\n  filename = \"2024/s52/viz.png\",\n  width = 30,\n  height = 31,\n  units = \"cm\",\n  dpi = 300\n)\n\n# abro\nbrowseURL(paste0(getwd(), \"/2024/s52/viz.png\"))\n```\n:::\n\n\n\n\n# Figura\n\n![](https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2024/s52/viz.png)\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}