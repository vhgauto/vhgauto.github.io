{
  "hash": "b0f10690b8a82eeeb5417298f070c38e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Semana 35\"\nsubtitle: \"Figura semana 35\"\nauthor: Víctor Gauto\ndate: \"2024-09-02\"\neditor_options:\n  chunk_output_type: console\ncategories: [geom_point, geom_from_path]\nimage: https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2024/s35/viz.png\nexecute:\n  eval: false\n  echo: true\ncode-fold: true\n---\n\n\n\n\n\n# Script\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# paquetes ----------------------------------------------------------------\n\nlibrary(glue)\nlibrary(ggtext)\nlibrary(showtext)\nlibrary(ggthemes)\nlibrary(patchwork)\nlibrary(tidyverse)\n\n# fuente ------------------------------------------------------------------\n\n# colores\npal <- c(\"#F28AAA\", \"#A1C2ED\", \"#9CC184\", \"#F9D14A\", \"#DF9ED4\")\nc1 <- \"#EAF3FF\"\nc2 <- \"white\"\nc3 <- \"grey10\"\nc4 <- \"grey90\"\n\n# fuente: Ubuntu\nfont_add(\n  family = \"ubuntu\", \n  regular = \"fuente/Ubuntu-Regular.ttf\",\n  bold = \"fuente/Ubuntu-Bold.ttf\",\n  italic = \"fuente/Ubuntu-Italic.ttf\"\n)\n\n# monoespacio & íconos\nfont_add(\n  family = \"jet\", \n  regular = \"fuente/JetBrainsMonoNLNerdFontMono-Regular.ttf\"\n)\n\nfont_add_google(\n  name = \"Ultra\",\n  family = \"ultra\"\n)\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n# caption\nfuente <- glue(\n  \"Datos: <span style='color:{pal[4]};'><span style='font-family:jet;'>\",\n  \"{{<b>tidytuesdayR</b>}}</span> semana {35}, \",\n  \"Power Rangers Dataset.</span>\"\n)\nautor <- glue(\"<span style='color:{pal[4]};'>**Víctor Gauto**</span>\")\nicon_twitter <- glue(\"<span style='font-family:jet;'>&#xf099;</span>\")\nicon_instagram <- glue(\"<span style='font-family:jet;'>&#xf16d;</span>\")\nicon_github <- glue(\"<span style='font-family:jet;'>&#xf09b;</span>\")\nicon_mastodon <- glue(\"<span style='font-family:jet;'>&#xf0ad1;</span>\")\nicon_imdb <- glue(\n  \"<span style='font-family:jet; font-size:40px'>&#xf2d8;</span>\")\nusuario <- glue(\"<span style='color:{pal[4]};'>**vhgauto**</span>\")\nsep <- glue(\"**|**\")\n\nmi_caption <- glue(\n  \"{fuente}<br>{autor} {sep} {icon_github} {icon_twitter} \",\n  \"{icon_instagram} {icon_mastodon} {usuario}\"\n)\n\nurl_pr <- \"https://upload.wikimedia.org/wikipedia/en/b/bd/Power_Rangers_Logo.webp\"\n\n# datos -------------------------------------------------------------------\n\ntuesdata <- tidytuesdayR::tt_load(2024, 35)\nepisodes <- tuesdata$power_rangers_episodes\n\n# me interesa la popularidad y el puntaje de los episodios al inicio y en la \n# actualidad de la serie\n\n# agrego el año de inicio a la temporada\nd <- episodes |> \n  mutate(season_title = str_replace(season_title, \"Season \", \"T\")) |> \n  mutate(año_i = year(min(air_date)), .by = season_title) |> \n  mutate(\n    año_i = glue(\n      \"<span style='font-family: jet; font-size: 15px; color: {pal[1]}'>\",\n      \"{año_i}</span>\"\n    )\n  ) |> \n  mutate(season_title = glue(\"{season_title}<br>{año_i}\")) |> \n  mutate(season_title = fct_reorder(season_title, air_date))\n\n# cantidad de temporadas\nn_season <- length(unique(d$season_title))\n\n# figura ------------------------------------------------------------------\n\n# título de los ejes\neje_horizontal <- glue(\"Votos<br>{icon_imdb}\")\neje_vertical <- glue(\"Puntaje<br>{icon_imdb}\")\n\n# función que genera una figura para las primeras/últimas temporadas\nf_gg <- function(tbl, subtitulo) {\n  g <- ggplot(tbl, aes(total_votes, IMDB_rating, fill = season_title)) +\n    # todas las temporadas\n    geom_point(\n      data = select(d, -season_title), aes(total_votes, IMDB_rating),\n      inherit.aes = FALSE, alpha = .1, size = .6, show.legend = FALSE,\n      color = c2, shape = 20\n    ) +\n    # temporadas de interés, a destacar\n    geom_point(\n      alpha = .9, size = 2, show.legend = FALSE, shape = 21\n    ) +\n    facet_wrap(vars(season_title), ncol = 5, scales = \"free\") +\n    scale_x_log10(\n      limits = c(10, 1000), expand = c(0, 0), breaks = c(10, 100, 1000)\n    ) +\n    scale_y_continuous(limits = c(4, 10), expand = c(0, 0), breaks = 4:10) +\n    scale_fill_manual(\n      values = rep(pal, length.out = n_season)\n    ) +\n    labs(x = eje_horizontal, y = eje_vertical, subtitle = subtitulo) +\n    coord_cartesian(clip = \"off\") +\n    theme_linedraw() +\n    theme(\n      aspect.ratio = 1,\n      plot.margin = margin(b = -20),\n      plot.background = element_blank(),\n      plot.subtitle = element_markdown(\n        size = 16, family = \"ubuntu\", color = c1, margin = margin(b = 5, t = 20)\n      ),\n      panel.background = element_blank(),\n      panel.grid = element_blank(),\n      panel.spacing.x = unit(1.3, \"line\"),\n      axis.ticks = element_blank(),\n      axis.title.x = element_markdown(\n        family = \"ubuntu\", hjust = .1, margin = margin(t = 10), color = c2\n      ),\n      axis.title.y = element_markdown(\n        family = \"ubuntu\", angle = 0, vjust = .5, margin = margin(r = 10),\n        color = c2\n      ),\n      axis.text = element_text(family = \"jet\", color = c2),\n      axis.text.y = element_text(vjust = 0),\n      strip.text = element_markdown(\n        hjust = 0, family = \"ubuntu\", color = pal[2], size = 13, face = \"bold\"\n      ),\n      strip.background = element_blank()\n    )\n  \n  return(g)\n}\n\n# número de las primeras/últimas temporadas\nn_head <- unique(as.numeric(d$season_title))[1:5]\nn_tail <- unique(as.numeric(d$season_title))[(n_season-4):n_season]\n\n# filtro a partir del número de las primeras/últimas temporadas\nd_head <- d |> \n  filter(as.numeric(season_title) %in% n_head)\n\nd_tail <- d |> \n  filter(as.numeric(season_title) %in% n_tail)\n\n# subtítulo de cada figura\npr <- glue(\n  \"<span style='font-family: ultra; color: {pal[4]};'>POWER RANGERS</span>\"\n)\n\nsub_head <- glue(\n  \"Las primeras temporadas de {pr} tuvieron la máxima popularidad, \",\n  \"con puntajes mixtos.\"\n)\n\nsub_tail <- glue(\n  \"Las últimas temporadas cayeron en popularidad, pero la calidad de los \",\n  \"episodios mejoró.\"\n)\n\n# logo de los Power Rangers\ng_pr <- ggplot() +\n  ggpath::geom_from_path(\n    data = tibble(x = 0, y = 0, path = url_pr),\n    aes(x, y, path = path)) +\n  coord_cartesian(xlim = c(-.02, .02212), clip = \"off\") +\n  theme_void()\n\n# composición final de la figura\ng <- f_gg(d_head, sub_head) / g_pr / f_gg(d_tail, sub_tail) +\n  plot_layout(heights = c(.43, .13, .43)) +\n  plot_annotation(\n    caption = mi_caption,\n    theme = theme(\n      plot.margin = margin(r = 20, l = 10, t = 10, b = 5),\n      plot.background = element_rect(fill = c3, color = pal[3], linewidth = 3),\n      plot.caption = element_markdown(\n        family = \"ubuntu\", size = 11, color = pal[1], margin = margin(t = -20)\n      )\n    )\n  )\n\n# guardo\nggsave(\n  plot = g,\n  filename = \"2024/s35/viz.png\",\n  width = 30,\n  height = 22,\n  units = \"cm\")\n\n# abro\nbrowseURL(glue(\"{getwd()}/2024/s35/viz.png\"))\n```\n:::\n\n\n\n\n# Figura\n\n![](https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2024/s35/viz.png)\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}