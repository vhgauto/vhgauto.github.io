{
  "hash": "5c07d9f8cf924c36bfe41e4ea12d5231",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Semana 27\"\nsubtitle: \"Figura semana 27\"\nauthor: Víctor Gauto\ndate: \"2024-07-08\"\neditor_options:\n  chunk_output_type: console\ncategories: [geom_tile, geom_point]\nimage: https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2024/s27/viz.png\nexecute:\n  eval: false\n  echo: true\ncode-fold: true\n---\n\n\n\n\n\n# Script\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# paquetes ----------------------------------------------------------------\n\nlibrary(glue)\nlibrary(ggtext)\nlibrary(showtext)\nlibrary(tidyverse)\n\n# fuente ------------------------------------------------------------------\n\n# colores\nc1 <- \"#040404\"\nc2 <- \"#FCFCFC\"\npal <- PrettyCols::prettycols(palette = \"Light\", n = 5)\n\n# fuente: Ubuntu\nfont_add(\n  family = \"ubuntu\", \n  regular = \"fuente/Ubuntu-Regular.ttf\",\n  bold = \"fuente/Ubuntu-Bold.ttf\",\n  italic = \"fuente/Ubuntu-Italic.ttf\")\n\n# monoespacio & íconos\nfont_add(\n  family = \"jet\", \n  regular = \"fuente/JetBrainsMonoNLNerdFontMono-Regular.ttf\")\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n# caption\nfuente <- glue(\n  \"Datos: <span style='color:{pal[3]};'><span style='font-family:jet;'>\",\n  \"{{<b>tidytuesdayR</b>}}</span> semana {27}, \",\n  \"<span style='font-family:jet;'>{{ttmeta}}</span>.</span>\")\nautor <- glue(\"<span style='color:{pal[3]};'>**Víctor Gauto**</span>\")\nicon_twitter <- glue(\"<span style='font-family:jet;'>&#xf099;</span>\")\nicon_instagram <- glue(\"<span style='font-family:jet;'>&#xf16d;</span>\")\nicon_github <- glue(\"<span style='font-family:jet;'>&#xf09b;</span>\")\nicon_mastodon <- glue(\"<span style='font-family:jet;'>&#xf0ad1;</span>\")\nusuario <- glue(\"<span style='color:{pal[3]};'>**vhgauto**</span>\")\nsep <- glue(\"**|**\")\n\nmi_caption <- glue(\n  \"<span style='font-size:27px; color:{pal[5]}'>{fuente}<br>{autor} {sep} \",\n  \"{icon_github} {icon_twitter} {icon_instagram} {icon_mastodon} \",\n  \"{usuario}</span>\")\n\n# datos -------------------------------------------------------------------\n\ntuesdata <- tidytuesdayR::tt_load(2024, 27)\n\ntt_datasets <- tuesdata$tt_datasets\ntt_variables <- tuesdata$tt_variables\n\n# me interesan los datasets que incluyen variables geográficas\n# y comparar con los otros datasets SIN datos geográficos\n\n# filtro por datos geográficos\ngeo_tbl <- tt_variables |> \n  filter(\n    str_detect(variable, \"^lat$|latitude|^lon$|longitude|lng|^long$|coord\")\n  ) |> \n  distinct(dataset_name, year, week) |> \n  arrange(year, week) |> \n  mutate(geo = \"Con datos geográficos\")\n\n# combino los datos geográficos con el resto\nd <- full_join(tt_datasets, geo_tbl, by = join_by(year, week, dataset_name)) |> \n  mutate(geo = if_else(is.na(geo), \"Sin datos geográficos\", geo)) |> \n  filter(geo == \"Con datos geográficos\") |> \n  select(year, week, geo)\n\n# agrego los datos NO geográficos\ne <- tt_datasets |> \n  distinct(year, week) |> \n  full_join(d, by = join_by(year, week)) |> \n  mutate(geo = if_else(is.na(geo), \"Sin datos geográficos\", geo))\n\n# incluyo todas las semanas posibles\nsemanas_tbl <- expand_grid(\n  year = unique(tt_datasets$year), \n  week = unique(tt_datasets$week)) |>\n  arrange(year, week)\n\n# última semana\nmax_dataset <- tt_datasets |> \n  filter(year == max(tt_datasets$year)) |> \n  slice_max(order_by = week, n = 1)\n\n# combino todos los datos\ne2 <- full_join(e, semanas_tbl, by = join_by(year, week)) |> \n  mutate(geo = if_else(is.na(geo), \"Semana sin datos\", geo)) |> \n  distinct() |> \n  arrange(year, week) |> \n  mutate(\n    estado = if_else(\n      year == max_dataset$year & week >= max_dataset$week,\n      \"out\",\n      \"in\"\n    )\n  ) |> \n  filter(estado == \"in\")\n\n# figura ------------------------------------------------------------------\n\n# etiquetas del eje horizontal\neje_x_tbl <- unique(d$year) |> \n  str_split(pattern = \"\") |> \n  map(.x = _, ~ glue(\"{.x}<br>\"))\n\neje_x_label <- tibble(eje_x_tbl) |> \n  mutate(label = map(.x = eje_x_tbl, str_flatten)) |> \n  unnest(label) |> \n  pull(label)\n\n# cantidad de datos\nn_datasets <- tt_datasets |> \n  distinct(year, week) |> \n  nrow()\n\nn_geo <- e2 |> \n  filter(geo == \"Con datos geográficos\") |> \n  nrow()\n\n# subtítulo\nmi_subtitulo <- glue(\n  \"Desde 2018 <b style='color:{pal[2]}'>TidyTuesday</b> ofrece\",\n  \"datasets reales para aprender\",\n  \"a manejar, modelar y visualizar\",\n  \"datos.<br>\",\n  \"De las {n_datasets} semanas, solamente\",\n  \"{n_geo} presentan <b style='color:{pal[3]}'>coordenadas\",\n  \"geográficas</b>. Se indican también\",\n  \"las semanas <b style='color:{pal[4]}'>sin datos</b>.\",\n  .sep = \"<br>\"\n)\n\n# figura\ng <- ggplot(e2, aes(year, week, color = geo, fill = geo)) +\n  geom_tile(\n    color = c1, linewidth = 1, show.legend = TRUE) +\n  geom_tile(\n    color = c1, fill = alpha(c2, .3), linewidth = 1, \n    show.legend = TRUE) +\n  geom_point(\n    size = 5, shape = 21, color = c1, stroke = 1, show.legend = TRUE) +\n  scale_x_continuous(\n    breaks = 2018:2024, limits = c(2017.5, 2024.5), \n    expand = c(0, 0), labels = eje_x_label) +\n  scale_y_continuous(\n    breaks = c(1, seq(5, 50, 5)), limits = c(.5, 52.5), expand = c(0, 0),\n    sec.axis = sec_axis(\n      breaks = c(45, 5),\n      labels = c(mi_subtitulo, mi_caption),\n      transform = ~ .\n    )) +\n  scale_color_manual(values = pal[3:5]) +\n  scale_fill_manual(values = pal[3:5]) +\n  guides(\n    color = guide_legend(position = \"inside\", override.aes = list(size = 7)),\n    fill = guide_legend(position = \"inside\", override.aes = list(size = 7))\n  ) +\n  coord_fixed(clip = \"off\") +\n  theme_void(base_size = 4) +\n  theme(\n    plot.margin = margin(b = 15, r = 105, l = 50, t = 20),\n    plot.background = element_rect(fill = c1, color = pal[4], linewidth = 3),\n    plot.caption = element_markdown(\n      family = \"ubuntu\", size = 18, color = pal[5], margin = margin(r = -100)),\n    axis.text.x = element_markdown(\n      family = \"jet\", color = pal[1], size = 30, margin = margin(t = 10)),\n    axis.text.y = element_text(\n      family = \"jet\", color = pal[1], size = 26, margin = margin(r = 10),\n      hjust = 1),\n    axis.text.y.right = element_markdown(\n      family = \"ubuntu\", size = 30, hjust = 0, margin = margin(l = 20),\n      vjust = 1, lineheight = unit(1.3, \"line\"), color = c2),\n    legend.key.size = unit(1.2, \"cm\"),\n    legend.text = element_text(\n      color = c2, family = \"ubuntu\", size = 23, margin = margin(l = 10)),\n    legend.position.inside = c(1.2, .3),\n    legend.justification.inside = c(0, 0)\n  )\n\n# guardo\nggsave(\n  plot = g,\n  filename = \"2024/s27/viz.png\",\n  width = 30,\n  height = 55,\n  units = \"cm\")\n\n# abro\nbrowseURL(\"2024/s27/viz.png\")\n```\n:::\n\n\n\n\n# Figura\n\n![](https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2024/s27/viz.png)\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}