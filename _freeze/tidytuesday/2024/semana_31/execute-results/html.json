{
  "hash": "2cc028d9e760e36bb99abb7d47556ef9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Semana 31\"\nsubtitle: \"Figura semana 31\"\nauthor: Víctor Gauto\ndate: \"2024-08-05\"\neditor_options:\n  chunk_output_type: console\ncategories: [geom_point, geom_richtext]\nimage: https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2024/s31/viz.png\nexecute:\n  eval: false\n  echo: true\ncode-fold: true\n---\n\n\n\n\nPuntaje de películas con `summer` en el título, y la mejor calificada por género.\n\n# Script\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# paquetes ----------------------------------------------------------------\n\nlibrary(glue)\nlibrary(ggtext)\nlibrary(showtext)\nlibrary(tidyverse)\n\n# fuente ------------------------------------------------------------------\n\n# colores\nc1 <- \"#A62F00\"\nc2 <- \"#FFF178\"\nc3 <- \"#6AD5E8\"\nc4 <- \"#3C4B99\"\nc5 <- \"#E7E1EF\"\nc6 <- \"#F7F4F9\"\n\n# fuente: Ubuntu\nfont_add(\n  family = \"ubuntu\", \n  regular = \"fuente/Ubuntu-Regular.ttf\",\n  bold = \"fuente/Ubuntu-Bold.ttf\",\n  italic = \"fuente/Ubuntu-Italic.ttf\"\n)\n\n# monoespacio & íconos\nfont_add(\n  family = \"jet\", \n  regular = \"fuente/JetBrainsMonoNLNerdFontMono-Regular.ttf\"\n)\n\n# Bebas Neue\nfont_add(\n  family = \"bebas\",\n  regular = \"fuente/BebasNeue-Regular.ttf\"\n)\n\nfont_add_google(\n  name = \"Send Flowers\",\n  family = \"flor\",\n  db_cache = FALSE\n)\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n# caption\nfuente <- glue(\n  \"Datos: <span style='color:{c1};'><span style='font-family:jet;'>\",\n  \"{{<b>tidytuesdayR</b>}}</span> semana {31}, \",\n  \"Internet Movie Database.</span>\"\n)\nautor <- glue(\"<span style='color:{c1};'>**Víctor Gauto**</span>\")\nicon_twitter <- glue(\"<span style='font-family:jet;'>&#xf099;</span>\")\nicon_instagram <- glue(\"<span style='font-family:jet;'>&#xf16d;</span>\")\nicon_github <- glue(\"<span style='font-family:jet;'>&#xf09b;</span>\")\nicon_mastodon <- glue(\"<span style='font-family:jet;'>&#xf0ad1;</span>\")\nusuario <- glue(\"<span style='color:{c1};'>**vhgauto**</span>\")\nsep <- glue(\"**|**\")\n\nmi_caption <- glue(\n  \"{fuente}<br>{autor} {sep} {icon_github} {icon_twitter} {icon_instagram} \",\n  \"{icon_mastodon} {usuario}\"\n)\n\n# datos -------------------------------------------------------------------\n\ntuesdata <- tidytuesdayR::tt_load(2024, 31)\n\nsummer_movie_genres <- tuesdata$summer_movie_genres\nsummer_movies <- tuesdata$summer_movies\n\n# me interesan los puntajes de las películas, por género, e indicar las\n# mejores puntuadas\n\nd <- summer_movies |> \n  separate_longer_delim(\n    cols = genres,\n    delim = \",\"\n  ) |> \n  drop_na()\n\n# traducciones de los géneros\ntrad <- tribble(\n  ~genres, ~generos,\n  \"Drama\"      ,\"Drama\",\n  \"Comedy\"     ,\"Comedia\",\n  \"Fantasy\"    ,\"Fantasía\",\n  \"Romance\"    ,\"Romance\",\n  \"Crime\"      ,\"Crimen\",\n  \"Film-Noir\"  ,\"Cine negro\",\n  \"History\"    ,\"Historia\",\n  \"Music\"      ,\"Música\",\n  \"Musical\"    ,\"Musical\",\n  \"Action\"     ,\"Acción\",\n  \"War\"        ,\"Bélica\",\n  \"Documentary\",\"Documental\",\n  \"Animation\"  ,\"Animación\",\n  \"Mystery\"    ,\"Misterio\",\n  \"Thriller\"   ,\"Suspenso\",\n  \"Family\"     ,\"Familia\",\n  \"Sport\"      ,\"Deporte\",\n  \"Adventure\"  ,\"Aventura\",\n  \"Sci-Fi\"     ,\"Ciencia ficción\",\n  \"Horror\"     ,\"Terror\",\n  \"Biography\"  ,\"Biografía\",\n  \"Western\"    ,\"Western\",\n  \"Short\"      ,\"Cortometraje\",\n  \"Talk-Show\"  ,\"Entrevistas\"\n)\n\n# incorporo las traducciones y mantengo las más comunes\nd_trad <- inner_join(d, trad, by = join_by(genres)) |> \n  mutate(generos = fct_reorder(generos, average_rating, max)) |> \n  mutate(n = n(), .by = generos) |> \n  filter(n > 5)\n\n# obtengo la película con mejor puntaje p/c género y aplico estilo\nd_top <- d_trad |> \n  slice_max(\n    order_by = average_rating,\n    by = generos,\n    with_ties = FALSE\n  ) |> \n  select(primary_title, year, generos, average_rating) |> \n  mutate(primary_title = str_wrap(primary_title, 40)) |> \n  mutate(primary_title = str_replace_all(primary_title, fixed(\"n\"), \"<br>\")) |> \n  mutate(\n    primary_title = str_replace(\n      primary_title,\n      \"Summer\",\n      glue(\"<b style='color:{c1}'>Summer</b>\"))) |> \n  mutate(\n    primary_title = str_replace(\n      primary_title,\n      \"summer\",\n      glue(\"<b style='color:{c1}'>summer</b>\"))) |> \n  mutate(\n    primary_title = glue(\n      \"{primary_title}<br><span style='font-family: jet; color:{c4}'>\",\n      \"({year})</span>\")\n)\n\n# título y subtítulo\nmi_titulo <- \"Películas veraniegas\"\nmi_subtitulo <- glue(\n  \"Género y puntaje de películas que tienen <span style='font-family: jet;\",\n  \"color:{c1}'>summer</span> en el título.<br>\",\n  \"Para cada género se indica la película con mejor valoración.\"\n)\n\n# eje horizontal con logo IMDb\nlogo_imdb <- glue(\n  \"<span style='font-family:jet; font-size:90px'>&#xf2d8;</span>\")\ntitulo_x <- glue(\"Puntaje<br>{logo_imdb}\")\n\n# figura\ng <- ggplot(d_trad, aes(average_rating, generos)) +\n  geom_point(\n    aes(fill = average_rating), alpha = .8, size = 5, shape = 23, \n    color = \"black\", stroke = .3\n  ) +\n  geom_richtext(\n    data = d_top, aes(average_rating, generos, label = primary_title), size = 5,\n    hjust = 0, nudge_x = .3, lineheight = unit(1, \"line\"), family = \"ubuntu\",\n    label.color = NA, fill = c5, label.r = unit(0, \"mm\"),\n    label.padding = unit(.16, \"line\")\n  ) +\n  scale_x_continuous(\n    limits = c(.9, 10.1),\n    breaks = 1:10,\n    expand = c(0, 0)\n  ) +\n  scale_fill_gradient2(\n    low = c1,\n    mid = c2,\n    high = c3,\n    midpoint = 5.5,\n    limits = range(d_trad$average_rating)\n  ) +\n  coord_cartesian(clip = \"off\") +\n  labs(\n    title = mi_titulo, subtitle = mi_subtitulo, x = titulo_x, y = NULL,\n    caption = mi_caption\n  ) +\n  theme_minimal() +\n  theme(\n    aspect.ratio = 2.2,\n    plot.background = element_rect(\n      fill = c6, color = c3, linewidth = 3\n    ),\n    plot.margin = margin(r = 263.6, l = 20),\n    plot.title = element_text(\n      family = \"flor\", size = 60, color = c1, margin = margin(t = 20),\n      face = \"bold\"\n    ),\n    plot.title.position = \"panel\",\n    plot.subtitle = element_markdown(\n      family = \"ubuntu\", size = 23, margin = margin(b = 15, t = 5),\n      lineheight = unit(1.2, \"line\")\n    ),\n    plot.caption = element_markdown(\n      size = 13, color = c4, margin = margin(r = -210, b = 10)\n    ),\n    panel.background = element_blank(),\n    panel.grid.major.x = element_line(\n      linetype = \"FF\", color = \"grey30\", linewidth = .1\n    ),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.title.x = element_markdown(\n      color = c4, size = 20, family = \"ubuntu\", margin = margin(t = 15)\n    ),\n    axis.text.x = element_text(\n      family = \"jet\", size = 15, margin = margin(t = 5), color = c4\n    ),\n    axis.text.y = element_text(family = \"bebas\", size = 30, color = c4),\n    axis.ticks = element_blank(),\n    legend.position = \"none\"\n)\n\n# guardo\nggsave(\n  plot = g,\n  filename = \"2024/s31/viz.png\",\n  width = 30,\n  height = 43,\n  units = \"cm\")\n\n# abro\nbrowseURL(glue(\"{getwd()}/2024/s31/viz.png\"))\n```\n:::\n\n\n\n\n# Figura\n\n![](https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2024/s31/viz.png)\n\n\n",
    "supporting": [
      "semana_31_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}