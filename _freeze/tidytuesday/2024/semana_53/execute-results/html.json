{
  "hash": "b87d0da01c71d6a6fd4b82ea08c3bb84",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Semana 53\"\nsubtitle: \"Figura semana 53\"\nauthor: Víctor Gauto\ndate: \"2025-01-06\"\neditor_options:\n  chunk_output_type: console\ncategories: [geom_sf]\nimage: https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2024/s53/viz.png\nexecute:\n  eval: false\n  echo: true\ncode-fold: true\n---\n\n\n\n\n\n# Script\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# paquetes ----------------------------------------------------------------\n\nlibrary(glue)\nlibrary(ggtext)\nlibrary(showtext)\nlibrary(tidyverse)\n\n# fuente ------------------------------------------------------------------\n\n# colores\nc1 <- \"#185461\"\nc2 <- \"#D8DEE9\"\nc3 <- \"#ECEFF4\"\nc4 <- \"black\"\nc5 <- \"white\"\nc6 <- \"#001959\"\n\n# fuente: Ubuntu\nfont_add(\n  family = \"ubuntu\",\n  regular = \"fuente/Ubuntu-Regular.ttf\",\n  bold = \"fuente/Ubuntu-Bold.ttf\",\n  italic = \"fuente/Ubuntu-Italic.ttf\"\n)\n\n# monoespacio & íconos\nfont_add(\n  family = \"jet\",\n  regular = \"fuente/JetBrainsMonoNLNerdFontMono-Regular.ttf\"\n)\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n# caption\nfuente <- glue(\n  \"Datos: <span style='color:{c1};'><span style='font-family:jet;'>\",\n  \"{{<b>tidytuesdayR</b>}}</span> semana {53}, \",\n  \"<b>James Beard Awards</b>, PythonCoderUnicorn.</span>\"\n)\nautor <- glue(\"<span style='color:{c1};'>**Víctor Gauto**</span>\")\nicon_twitter <- glue(\"<span style='font-family:jet;'>&#xf099;</span>\")\nicon_instagram <- glue(\"<span style='font-family:jet;'>&#xf16d;</span>\")\nicon_github <- glue(\"<span style='font-family:jet;'>&#xf09b;</span>\")\nicon_mastodon <- glue(\"<span style='font-family:jet;'>&#xf0ad1;</span>\")\nicon_bsky <- glue(\"<span style='font-family:jet;'>&#xe28e;</span>\")\nusuario <- glue(\"<span style='color:{c1};'>**vhgauto**</span>\")\nsep <- glue(\"**|**\")\n\nmi_caption <- glue(\n  \"{fuente}<br>{autor} {sep} {icon_github} {icon_twitter} {icon_instagram} \",\n  \"{icon_mastodon} {icon_bsky} {usuario}\"\n)\n\n# datos -------------------------------------------------------------------\n\ntuesdata <- tidytuesdayR::tt_load(2024, 53)\nrestaurant_and_chef <- tuesdata$restaurant_and_chef\n\n# me interesa un mapa con la cantidad de ganadores por Estado\n\n# obtengo cantidad de ganadores y nombre del Estado\nd <- restaurant_and_chef |> \n  filter(rank == \"Winner\") |> \n  filter(str_detect(city, \",\")) |> \n  separate_wider_delim(\n    cols = city,\n    delim = \", \",\n    names = c(\"ciudad\", \"estado_nombre\")\n  ) |> \n  count(estado_nombre, sort = TRUE)\n\n# mapa de EEUU\nusa_sf <- rgeoboundaries::gb_adm1(country = \"USA\") |> \n  select(\"estado_nombre\" = shapeName)\n\n# remuevo Hawaii para obtener únicamente la parte continental\nd_sf <- inner_join(d, usa_sf, by = join_by(estado_nombre)) |>\n  filter(estado_nombre != \"Hawaii\") |> \n  sf::st_as_sf()\n\n# recorto USA a la extensión\next <- sf::st_bbox(d_sf) |> \n  sf::st_as_sfc()\n\nusa_crop_sf <- sf::st_intersection(usa_sf, ext) |> \n  sf::st_drop_geometry()\n\n# todos los Estados continentales\nestados_cont <- inner_join(usa_sf, usa_crop_sf, by = join_by(estado_nombre))\n\n# divido en rangos\nd_sf <- full_join(d, estados_cont, by = join_by(estado_nombre)) |> \n  sf::st_as_sf() |>\n  sf::st_transform(crs = sf::st_crs(\"ESRI:102003\")) |> \n  mutate(rango = cut_width(n, 10)) |> \n  mutate(lim_i = str_extract(rango, \"(?<=\\(|\\[)[-0-9.]+\")) |> \n  mutate(lim_s = str_extract(rango, \"(?<=,)[-0-9.]+(?=\\]|\\))\")) |> \n  mutate(\n    r = if_else(\n      lim_i < 0,\n      paste0(\"<\", lim_s),\n      paste0(lim_i, \"-\", lim_s)\n    )\n  ) |> \n  mutate(r = fct_reorder(r, n, .na_rm = TRUE, .desc = TRUE))\n\n# figura ------------------------------------------------------------------\n\n# agrego las capitales de Estado\ncapitales <- maps::us.cities |> \n  as_tibble() |> \n  filter(capital == 2) |> \n  sf::st_as_sf(coords = c(\"long\", \"lat\"), crs = 4326) |> \n  sf::st_intersection(ext) |> \n  sf::st_transform(crs = sf::st_crs(\"ESRI:102003\")) |> \n  sf::st_as_sfc()\n\n# logo y top 2 Estados\nlogo <- \"https://pbs.twimg.com/profile_images/1138814510528114691/plI3Ufxt_400x400.png\"\nlogo_label <- glue(\"<img src='{logo}' width=100 />\")\n\nny <- slice(d_sf, 1)\nca <- slice(d_sf, 2)\n\n# subtítulo\nmi_subtitulo <- glue(\n  \"Entre 1984 y 2024, {ny$n} restaurantes de <b style='color:{c6}'>New York</b> \n  han recibido el prestigioso premio<br> <b>James Beard</b>. Le sigue \n  <b style='color:{c6}'>California</b>, con {ca$n} establecimientos.\"\n)\n\n# figura\ng <- ggplot() +\n  geom_sf(data = d_sf, aes(fill = r), color = c4) +\n  geom_sf(\n    data = capitales, shape = 21, fill = c5, color = c4, size = 1\n  ) +\n  annotate(\n    geom = \"richtext\", x = I(.025), y = -I(.025), label = logo_label, hjust = 0,\n    vjust = 0, fill = NA, label.color = NA\n  ) +\n  scico::scale_fill_scico_d(\n    palette = \"batlow\",\n    na.value = c2,\n    labels = c(as.character(sort(unique(d_sf$r)))[1:6], \"Sin ganadores\")\n  ) +\n  coord_sf(clip = \"off\") +\n  guides(\n    fill = guide_legend(override.aes = list(color = NA))\n  ) +\n  labs(\n    subtitle = mi_subtitulo,\n    fill = \"Cantidad denrestaurantesnganadores\",\n    caption = mi_caption\n  ) +\n  theme_void(base_size = 12, base_family = \"ubuntu\") +\n  theme(\n    plot.background = element_rect(fill = c3, color = c6, linewidth = 3),\n    plot.margin = margin(b = 14.3, l = 5, r = 5, t = 14),\n    plot.subtitle = element_markdown(\n      color = c1, size = 18, hjust = .5, lineheight = 1.2\n    ),\n    plot.caption = element_markdown(\n      color = c4, lineheight = 1.2, size = 11, margin = margin(r = 5)\n    ),\n    legend.title = element_text(),\n    legend.text = element_text(family = \"jet\"),\n    legend.position = \"inside\",\n    legend.position.inside = c(.87, .05),\n    legend.justification = c(0, 0)\n  )\n\n# guardo\nggsave(\n  plot = g,\n  filename = \"2024/s53/viz.png\",\n  width = 30,\n  height = 22,\n  units = \"cm\"\n)\n\n# abro\nbrowseURL(paste0(getwd(), \"/2024/s53/viz.png\"))\n```\n:::\n\n\n\n\n# Figura\n\n![](https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2024/s53/viz.png)\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}