{
  "hash": "0ab3e9ad0ea46b213ba3066a614e9df6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Semana 42\"\nsubtitle: \"Figura semana 42\"\nauthor: Víctor Gauto\ndate: \"2023-10-22\"\neditor_options:\n  chunk_output_type: console\ncategories: [geom_vline, geom_hline, geom_text, geom_segment, geom_curve, geom_richtext, geom_point]\nimage: https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2023/semana_42/viz.png\nexecute:\n  eval: false\n  echo: true\ncode-fold: true\n---\n\n\n\n\nIdentificar el cuadrante emocional de las canciones de Taylor Swift.\n\n# Script\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# paquetes ----------------------------------------------------------------\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(glue)\nlibrary(ggtext)\n\n# fuente ------------------------------------------------------------------\n\n# colores\n# scales::show_col(tayloRswift::swift_palettes$lover)\nc1 <- \"#76BAE0\"\nc2 <- \"#0E3D5B\"\nc3 <- \"#B8396B\"\nc4 <- \"#FFD1D7\"\nc5 <- \"grey10\"\n\n# texto gral\nfont_add_google(name = \"Ubuntu\", family = \"ubuntu\")\n# ejes, explicaciones\nfont_add_google(name = \"Victor Mono\", family = \"victor\")\n# esquina (sentimientos)\nfont_add_google(name = \"Bebas Neue\", family = \"bebas\")\n# Taylor Swift\nfont_add_google(name = \"Pattaya\", family = \"pattaya\")\n\n# íconos\nfont_add(\"fa-brands\", \"icon/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add(\"fa-solids\", \"icon/Font Awesome 6 Free-Solid-900.otf\")\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n# caption\nfuente <- glue(\n  \"Datos: <span style='color:{c3};'><span style='font-family:mono;'>\",\n  \"{{<b>tidytuesdayR</b>}}</span> semana 42. \",\n  \"{{<span style='font-family:victor'>taylor</span>}}, \",\n  \"**W. Jake Thompson**</span>\")\nautor <- glue(\"Autor: <span style='color:{c3};'>**Víctor Gauto**</span>\")\nicon_twitter <- glue(\"<span style='font-family:fa-brands;'>&#xf099;</span>\")\nicon_github <- glue(\"<span style='font-family:fa-brands;'>&#xf09b;</span>\")\nusuario <- glue(\"<span style='color:{c3};'>**vhgauto**</span>\")\nsep <- glue(\"**|**\")\n\nmi_caption <- glue(\n  \"{fuente}<br>{autor} {sep} {icon_github} {icon_twitter} {usuario}\")\n\n# datos -------------------------------------------------------------------\n\nbrowseURL(\"https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-10-17/readme.md\")\n\ntaylor_all_songs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-10-17/taylor_all_songs.csv')\n\n# origen de la idea del plano\nbrowseURL(\"https://medium.com/@gregory2/visualizing-gorillaz-in-r-how-to-analyze-artists-using-spotifyr-ebae3e05491b\")\n\n# me interesa analizar todas las canciones (que pertenezcan a algún álbum),\n# de acuerdo a su valencia (positividad) y energía (intensidad/actividad)\n# en base a esos dos parámetros, puedo establecer un plano de coordenadas\n# que tiene en las esquinas cuatro sentimientos: enojo, felicidad, tristeza y\n# tranquilidad\n\n# explicación de c/feature\nbrowseURL(\"https://developer.spotify.com/documentation/web-api/reference/get-several-audio-features\")\n\n# álbums que me interesan\nalbum_tay <- c(\n  \"Taylor Swift\", \"Fearless (Taylor's Version)\", \"Speak Now\", \"1989\", \"evermore\",\n  \"Red (Taylor's Version)\", \"reputation\", \"Lover\", \"folklore\", \"Midnights\",\n  \"The Taylor Swift Holiday Collection\")\n\n# convierto el vector de nombres de álbum a factor\nalbum_select <- taylor_all_songs |> \n  select(album_release, album_name) |> \n  filter(album_name %in% album_tay) |> \n  drop_na() |> \n  mutate(album_name = fct_reorder(album_name, album_release)) |> \n  mutate(album_name = fct_rev(album_name)) |> \n  distinct(album_name) |> \n  pull()\n\n# todas las canciones\nd <- taylor_all_songs |> \n  select(album_name, track_name, valence, energy) |> \n  filter(album_name %in% album_tay) |> \n  drop_na() |> \n  mutate(album_name = fct(album_name, levels = as.character(album_select))) |> \n  mutate(album_name = str_to_upper(album_name))\n\n# canciones extremas de sentimientos\n# calculo la distancia entre los puntos y el centro del cuadrante\n# divido por cuadrante y obtengo un representante extremo por cada sentimiento\n# contenta\nd_contenta <- d |> \n  filter(between(valence, .5, 1) & between(energy, .5, 1)) |> \n  mutate(distancia = sqrt((valence - .5)^2 + (energy - .5)^2)) |> \n  slice_max(order_by = distancia, n = 1)\n\n# enojada\nd_enojada <- d |> \n  filter(between(valence, 0, .5) & between(energy, .5, 1)) |> \n  mutate(distancia = sqrt((valence - .5)^2 + (energy - .5)^2)) |> \n  slice_max(order_by = distancia, n = 1)\n\n# triste\nd_triste <- d |> \n  filter(between(valence, 0, .5) & between(energy, 0, .5)) |> \n  mutate(distancia = sqrt((valence - .5)^2 + (energy - .5)^2)) |> \n  slice_max(order_by = distancia, n = 1)\n\n# tranquila\nd_tranquila <- d |> \n  filter(between(valence, .5, 1) & between(energy, 0, .5)) |> \n  mutate(distancia = sqrt((valence - .5)^2 + (energy - .5)^2)) |> \n  slice_max(order_by = distancia, n = 1)\n\n# sentimientos extremos\nd_extremos <- bind_rows(d_contenta, d_enojada, d_triste, d_tranquila)\n\n# figura ------------------------------------------------------------------\n\n# paleta de colores para los puntos (canciones)\npaleta <- MoMAColors::moma.colors(palette_name = \"Fritsch\")\n\n# colores p/c álbum\nalbum_color <- c(\n  rep(paleta[1], 3),\n  rep(paleta[2], 3),\n  rep(paleta[3], 3),\n  rep(paleta[4], 2))\n\n# formas p/c álbum\nalbum_shape <- rep(c(21, 22, 23, 24), 3)\n\n# ejes en la mitad del plano\nejes_tbl <- tibble(\n  x = c(0, .5), y = c(.5, 0), xend = c(1, .5), yend = c(.5, 1))\n\n# grilla de líneas de trazos\ngrilla_v <- tibble(\n  x = seq(.1, .9, .1), y = 0, xend = seq(.1, .9, .1), yend = 1)\n\n# etiquetas de sentimientos en las esquinas del plano\nsentimiento <- tibble(\n  label = c(\"enojada\", \"contenta\", \"triste\", \"tranquila\"),\n  x = c(-Inf, Inf, -Inf, Inf),\n  y = c(Inf, Inf, -Inf, -Inf),\n  hjust = c(0, 1, 0, 1),\n  vjust = c(1, 1, 0, 0))\n\n# flechas, que unen tapas de álbum p/canciones extremas y los puntos\nflechas_tbl <- tibble(\n  x = d_extremos$valence*1,\n  y = d_extremos$energy*1,\n  xend = c(1.05, .2, .2, .7),\n  yend = c(.85, .9, .1, .15))\n\n# imágenes de las tapas de álbum\ntapa_album <- list.files(\"2023/semana_42/\", pattern = \"ts\", full.names = TRUE)\n\n# etiqueta de las canciones extremas, con nombre de la canción y la tapa del\n# álbum\nimg_album <- tibble(\n  x = flechas_tbl$xend,\n  y = flechas_tbl$yend,\n  track = d_extremos$track_name,\n  path = c(tapa_album[1], tapa_album[4], tapa_album[3], tapa_album[2])) |> \n  mutate(track = str_wrap(track, 18)) |> \n  mutate(track = str_replace_all(track, \"\\n\", \"<br>\")) |> \n  mutate(label = glue(\n    \"<img src='{path}' width='75' /><br>\",\n    \"<span style='font-family:ubuntu;'>*{track}*</span>\")) |> \n  mutate(hjust = c(0, 1, 0, 0)) |> \n  mutate(vjust = c(0, 1, 1, 0))\n\n# puntos que representan el álbum entero (mediana)\nd_resumen <- d |> \n  summarise(\n    valence = median(valence),\n    energy = median(energy),\n    .by = album_name)\n\n# explicación de los ejes del plano\nejes_explic <- tibble(\n  x = c(1, .5, .03, .5),\n  y = c(.5, .97, .5, 0),\n  label = c(\"LETRAnPOSITIVA\", \"MÁSnENERGÍA\", \"LETRAnNEGATIVA\", \"MENOSnENERGÍA\"),\n  angle = c(0, 90, 0, 90),\n  hjust = c(1, 1, 0, 0),\n  vjust = c(0, 0, 0, 0))\n\n# explicación de los íconos pequeños/grandes\nicono_grande <- \"► Íconos grandes representannla mediana del álbum\"\nicono_peque <- \"► Íconos pequeños representanncanciones individuales\"\n\nicono_tbl <- tibble(\n  x = c(.54, .935),\n  y = c(.455, .71),\n  label = c(icono_grande, icono_peque))\n\n# figura\ng <- ggplot(d, aes(valence, energy)) +\n  # grilla\n  geom_vline(\n    xintercept = seq(.1, .9, .1), color = c4, linetype = \"8f\", \n    linewidth = .2) +\n  geom_hline(\n    yintercept = seq(.1, .9, .1), color = c4, linetype = \"8f\", \n    linewidth = .2) +\n  # etiqueta de las esquinas\n  geom_text(\n    data = sentimiento, aes(x, y, label = label, hjust = hjust, vjust = vjust),\n    family = \"bebas\", size = 15, color = c2, inherit.aes = FALSE) +\n  # ejes\n  geom_segment(\n    data = ejes_tbl, aes(x, y, xend = xend, yend = yend), inherit.aes = FALSE,\n    color = c3, linewidth = 1, linetype = 1, alpha = .9,\n    arrow = arrow(\n      angle = 15, length = unit(.75, \"line\"), ends = \"both\", type = \"open\")) +\n  # centro del plano\n  annotate(\n    geom = \"point\", x = .5, y = .5, size = 3, color = c3, shape = 10, \n    alpha = .9, stroke = 1.5) +\n  # explicación de los íconos\n  geom_text(\n    data = icono_tbl, aes(x, y, label = label), inherit.aes = FALSE,\n    color = c2, hjust = 0, vjust = 1, family = \"victor\", size = 3) +\n  # explicación de los ejes del plano\n  geom_text(\n    data = ejes_explic, inherit.aes = FALSE,\n    aes(x, y, label = label, angle = I(angle), hjust = hjust, vjust = vjust),\n    family = \"victor\", fontface = \"italic\", size = 3, color = c2,\n    nudge_x = -.01, nudge_y = .01) +\n  # flechas\n  geom_curve(\n    data = flechas_tbl, aes(x, y, xend = xend, yend = yend), \n    inherit.aes = FALSE, curvature = .15, color = c3,\n    arrow = arrow(angle = 20, length = unit(.4, \"line\"), type = \"closed\")) +\n  # etiqueta de las canciones extremas\n  geom_richtext(\n    data = img_album, aes(x, y, label = label, hjust = hjust, vjust = vjust), \n    inherit.aes = FALSE, fill = c2, label.color = NA, \n    color = c4, label.r = unit(0, \"line\")) +\n  # canciones individuales\n  geom_point(\n    aes(color = album_name, shape = album_name, fill = album_name), \n    size = 2, show.legend = TRUE, stroke = .5) +\n  # álbums individuales (medianas)\n  geom_point(data = d_resumen,\n    aes(valence, energy, color = album_name, shape = album_name, \n        fill = album_name),\n    size = 7, alpha = .8, show.legend = FALSE, stroke = 2, color = c5) +\n  # caption\n  annotate(\n    geom = \"richtext\", x = 1.35, y = -.082, label = mi_caption, color = c2,\n    family = \"ubuntu\", size = 3.5, hjust = 1, fill = NA, label.color = NA) +\n  # manual\n  scale_color_manual(values = album_color) +\n  scale_fill_manual(values = alpha(album_color, .4)) +\n  scale_shape_manual(values = album_shape) +\n  coord_cartesian(\n    xlim = c(0, 1), ylim = c(0, 1), expand = FALSE, clip = \"off\") +\n  labs(\n    x = NULL, y = NULL, color = NULL, shape = NULL, fill = NULL,\n    title = \"Taylor Swift\") +\n  guides(\n    color = guide_legend(override.aes = list(size = 4, stroke = 1))) +\n  theme_minimal() +\n  theme(\n    aspect.ratio = 1,\n    plot.margin = margin(21.2, 234, 71.2, 29),\n    plot.background = element_rect(\n      fill = c1, color = c3, linewidth = 3),\n    plot.title = element_text(\n      family = \"pattaya\", color = c3, size = 140, hjust = -.5,\n      margin = margin(5, 0, 25, 0)),\n    plot.title.position = \"panel\",\n    panel.grid = element_blank(),\n    legend.text = element_text(family = \"ubuntu\", color = c2, face = \"bold\"),\n    legend.background = element_rect(\n      fill = c1, color = c2, linetype = 3, linewidth = .2),\n    legend.position = c(1.02, .16),\n    legend.margin = margin(0, 3, 2, 0),\n    legend.justification = c(0, 0),\n    axis.text = element_blank()\n  )\n\n# guardo\nggsave(\n  plot = g,\n  filename = \"2023/semana_42/viz.png\",\n  width = 30,\n  height = 30,\n  units = \"cm\")\n\n# abro\nbrowseURL(\"2023/semana_42/viz.png\")\n```\n:::\n\n\n\n\n# Figura\n\n![](https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2023/semana_42/viz.png)\n\n\n",
    "supporting": [
      "semana_42_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}