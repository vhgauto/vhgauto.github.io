{
  "hash": "6aede8b54669099602d3b072622b4f33",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Semana 50\"\nsubtitle: \"Figura semana 50\"\nauthor: Víctor Gauto\ndate: \"2023-12-17\"\neditor_options:\n  chunk_output_type: console\ncategories: [geom_richtext, geom_point]\nimage: https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2023/semana_50/viz.png\nexecute:\n  eval: false\n  echo: true\ncode-fold: true\n---\n\n\n\n\nCalificaciones de películas navideñas, por género.\n\n# Script\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# paquetes ----------------------------------------------------------------\n\nlibrary(glue)\nlibrary(ggtext)\nlibrary(showtext)\nlibrary(tidyverse)\n\n# fuente ------------------------------------------------------------------\n\n# colores\nc1 <- \"#CC3A6A\"\nc2 <- \"grey90\"\nc3 <- \"#100A2C\"\nc4 <- \"white\"\nc5 <- \"#DBB1D3\"\nc6 <- \"#100A2C\"\n\n# texto gral\nfont_add_google(name = \"Ubuntu\", family = \"ubuntu\")\n# calificación IMDB y año\nfont_add_google(name = \"Victor Mono\", family = \"victor\", db_cache = FALSE)\n# título\nfont_add_google(name = \"Mountains of Christmas\", family = \"christmas\", db_cache = FALSE)\n\n# íconos\nfont_add(\"fa-brands\", \"icon/Font Awesome 6 Brands-Regular-400.otf\")\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n# caption\nfuente <- glue(\n  \"Datos: <span style='color:{c3};'><span style='font-family:mono;'>\",\n  \"{{<b>tidytuesdayR</b>}}</span> semana 50. \",\n  \"Internet Movie Database</span>\")\nautor <- glue(\"<span style='color:{c3};'>**Víctor Gauto**</span>\")\nicon_twitter <- glue(\"<span style='font-family:fa-brands;'>&#xf099;</span>\")\nicon_github <- glue(\"<span style='font-family:fa-brands;'>&#xf09b;</span>\")\nicon_mastodon <- glue(\"<span style='font-family:fa-brands;'>&#xf4f6;</span>\")\nusuario <- glue(\"<span style='color:{c3};'>**vhgauto**</span>\")\nsep <- glue(\"**|**\")\n\nmi_caption <- glue(\n  \"{fuente}<br>{autor} {sep} {icon_github} {icon_twitter} {icon_mastodon} \n  {usuario}\")\n\nimdb_logo <- glue(\n  \"<span style='font-family:fa-brands; font-size:30pt'>\",\n  \"&#xf2d8;</span>\")\n\n# datos -------------------------------------------------------------------\n\nbrowseURL(\"https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-12-05/readme.md\")\n\nholiday_movies <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-12-12/holiday_movies.csv')\nholiday_movie_genres <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-12-12/holiday_movie_genres.csv')\n\n# me interesa ver la distribución de calificaciones de IMDb, por género\nd_eng <- holiday_movies |> \n  select(-genres) |> \n  full_join(holiday_movie_genres, by = join_by(tconst)) |> \n  filter(title_type == \"movie\") |> \n  select(average_rating, genres) |> \n  mutate(genres = fct_reorder(genres, average_rating)) |>\n  drop_na() |> \n  mutate(m = median(average_rating), .by = genres) |> \n  mutate(n = n(), .by = genres) \n\n# traducción de los géneros de las peículas\ngeneros_eng <- unique(d_eng$genres) |> sort()\ngeneros_esp <- c(\n  \"Terror\", \"Thriller\", \"Misterio\", \"Acción\", \"Familiar\", \"Fantasía\", \"Comedia\",\n  \"Ciencia ficción\", \"Western\", \"Romántica\", \"Deportes\", \"Policial\", \"Aventura\",\n  \"Drama\", \"Musical\", \"Histórica\", \"Animada\", \"Bélica\", \"Música\", \"Noir\", \n  \"Biografía\", \"Documental\")\n\nnames(generos_esp) <- generos_eng\n\nd <- d_eng |> \n  mutate(genres = generos_esp[genres]) |> \n  mutate(genres = fct_reorder(genres, average_rating))\n\n# películas con mejor puntuación, por género\nd_max <- holiday_movies |> \n  select(-genres) |> \n  full_join(holiday_movie_genres, by = join_by(tconst)) |> \n  filter(title_type == \"movie\") |> \n  mutate(genres = generos_esp[genres]) |>\n  mutate(genres = fct_reorder(genres, average_rating)) |> \n  select(primary_title, year, genres, average_rating) |> \n  drop_na() |> \n  slice_max(average_rating, n = 1, by = genres, with_ties = FALSE) |> \n  mutate(average_rating = str_replace(average_rating, \"\\.\", \",\")) |> \n  mutate(\n    titulo_label = glue(\n      \"<span style='font-family:ubuntu; font-size:13pt; color: white'>\",\n      \"{primary_title}</span>\")) |> \n  mutate(\n    año_label = glue(\n      \"<span style='font-family: victor; font-size:10pt; color: grey90'>\",\n      \"{year}</span>\")) |> \n  mutate(puntaje_label = glue(\n    \"<span style='font-family: victor; font-size:10pt'>\",\n    \"**{average_rating}**/10</span>\")) |> \n  mutate(label = glue(\"{titulo_label} {año_label}<br>{puntaje_label}\"))\n\n# figura ------------------------------------------------------------------\n\n# título y subtítulo\nmi_tit <- \"En Navidad veamos un documental\"\n\nmi_sub <- glue(\n  \"Los **documentales** presentan la mejor calificación entre las películas \",\n  \"navideñas. Caso opuesto,<br>las de **terror** son las peores. \",\n  \"Para cada género se indica la película con el mejor puntaje.\")\n\n# figura\ng <- ggplot(d, aes(average_rating, genres, group = genres)) +\n  geom_richtext(\n    data = d_max, aes(10.2, genres, label = label), hjust = 0, fill = NA, \n    label.color = NA) +\n  geom_point( shape = 20, size = 5, alpha = .3, color = c2) +\n  geom_point(\n    aes(x = m), shape = 18, size = 6, alpha = 1, color = c4) +\n  scale_x_continuous(\n    breaks = seq(1, 10, 1), expand = c(0, 0), limits = c(1, 11)) +\n  labs(\n    title = mi_tit, subtitle = mi_sub, x = glue(\"Calificación {imdb_logo}\"), \n    y = NULL, caption = mi_caption) +\n  coord_cartesian(clip = \"off\") +\n  guides(fill = guide_colorsteps(\n    frame.colour = c4, ticks = TRUE, ticks.colour = c4,\n    ticks.linewidth = 3/.pt, frame.linewidth = 1/.pt)) +\n  theme_void() +\n  theme(\n    plot.margin = margin(8.6, 280, 8.6, 5),\n    plot.background = element_rect(\n      fill = c1, color = c2, linewidth = 3),\n    plot.title = element_text(\n      family = \"christmas\", size = 60, color = c4,\n      margin = margin(t = 6)),\n    plot.title.position = \"plot\",\n    plot.subtitle = element_markdown(\n      family = \"ubuntu\", size = 18, color = c6, \n      margin = margin(b = 10, l = 10)),\n    plot.caption = element_markdown(\n      family = \"ubuntu\", color = c2, size = 10, \n      margin = margin(t = 10, r = -270)),\n    aspect.ratio = 1.5,\n    legend.key.height = unit(12, \"mm\"),\n    axis.title.x = element_markdown(\n      size = 20, hjust = .5, family = \"ubuntu\", color = c2, \n      margin = margin(t = 10)),\n    axis.ticks.y = element_blank(),\n    axis.text.x = element_text(\n      family = \"victor\", size = 14, color = c2, face = \"bold\"),\n    axis.text.y = element_text(\n      family = \"ubuntu\", size = 15, hjust = 1, margin = margin(0, 10, 0, 0),\n      color = c6),\n    panel.grid.major.x = element_line(\n      color = c5, linetype = \"ff\", linewidth = .1))\n\n# guardo\nggsave(\n  plot = g,\n  filename = \"2023/semana_50/viz.png\",\n  width = 30,\n  height = 32,\n  units = \"cm\")\n\n# abro\nbrowseURL(\"2023/semana_50/viz.png\")\n```\n:::\n\n\n\n\n# Figura\n\n![](https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2023/semana_50/viz.png)\n\n\n",
    "supporting": [
      "semana_50_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}