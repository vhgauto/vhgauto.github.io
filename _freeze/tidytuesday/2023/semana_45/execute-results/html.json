{
  "hash": "d0f6605a2547dbe4dfd7a5b4581fa4c6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Semana 45\"\nsubtitle: \"Figura semana 45\"\nauthor: Víctor Gauto\ndate: \"2023-11-12\"\neditor_options:\n  chunk_output_type: console\ncategories: [geom_line, geom_point, geom_text]\nimage: https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2023/semana_45/viz.png\nexecute:\n  eval: false\n  echo: true\ncode-fold: true\n---\n\n\n\n\n\n# Script\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# paquetes ----------------------------------------------------------------\n\nlibrary(tidyverse)\nlibrary(fontawesome)\nlibrary(gender)\nlibrary(showtext)\nlibrary(glue)\nlibrary(ggtext)\n\n# fuente ------------------------------------------------------------------\n\n# colores\nc1 <- \"#88C0D0\"\nc2 <- \"#81A1C1\"\nc3 <- \"#5E81AC\"\nc4 <- \"grey90\"\nc5 <- \"#306489\"\nc6 <- \"#222B4C\"\n\n# texto gral\nfont_add_google(name = \"Ubuntu\", family = \"ubuntu\")\n# algoritmos, eje vertical\nfont_add_google(name = \"Victor Mono\", family = \"victor\", db_cache = FALSE)\n# eje horizontal, años\nfont_add_google(name = \"Bebas Neue\", family = \"bebas\", db_cache = FALSE)\n# título\nfont_add_google(name = \"Vast Shadow\", family = \"vast\")\n\n# íconos\nfont_add(\"fa-brands\", \"icon/Font Awesome 6 Brands-Regular-400.otf\")\nfont_add(\"fa-solids\", \"icon/Font Awesome 6 Free-Solid-900.otf\")\nfont_add(\"fa-regular\", \"icon/Font Awesome 6 Free-Regular-400.otf\")\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n# caption\nfuente <- glue(\n  \"Datos: <span style='color:{c3};'><span style='font-family:mono;'>\",\n  \"{{<b>tidytuesdayR</b>}}</span> semana 45. \",\n  \"MIT Election Data and Science Lab, \",\n  \"**Harvard Dataverse**</span>\")\nautor <- glue(\"Autor: <span style='color:{c3};'>**Víctor Gauto**</span>\")\nicon_twitter <- glue(\"<span style='font-family:fa-brands;'>&#xf099;</span>\")\nicon_github <- glue(\"<span style='font-family:fa-brands;'>&#xf09b;</span>\")\nusuario <- glue(\"<span style='color:{c3};'>**vhgauto**</span>\")\nsep <- glue(\"**|**\")\n\nmi_caption <- glue(\n  \"{fuente}<br>{autor} {sep} {icon_github} {icon_twitter} {usuario}\")\n\n# datos -------------------------------------------------------------------\n\nbrowseURL(\"https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-11-07/readme.md\")\n\nhouse <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-11-07/house.csv')\n\n# me interesa el género de los candidatos y la proporción en el tiempo\n\n# función para obtener el 1er nombre, y si es una sola letra, el segundo\nget_first_name <- function(name) {\n  name_parts <- str_split(name, \" \")[[1]]\n  if (nchar(name_parts[1]) == 1) {\n    return(name_parts[2])\n  } else {\n    return(name_parts[1])\n  }\n}\n\n# primer nombre de cada candidato, agrupado por año\n# se agrupan, por año, los mismos nombres\nd <- house |> \n  filter(!writein) |> \n  select(year, candidate) |> \n  mutate(primer = map(.x = candidate, ~ get_first_name(name = .x))) |> \n  unnest(primer) |> \n  count(primer, .by = year) |> \n  arrange(.by) |> \n  rename(year = .by)\n\n# por cada algoritmo, obtengo el género del candidato\nd_ipums <- d |> \n  mutate(genero = map(\n    .x = primer,\n    (x) gender(x, countries = \"United States\", method = \"ipums\")$gender))\n\nd_ssa <- d |> \n  mutate(genero = map(\n    .x = primer,\n    (x) gender(x, countries = \"United States\", method = \"ssa\")$gender))\n\nd_napp <- d |> \n  mutate(genero = map(\n    .x = primer,\n    (x) gender(x, method = \"napp\")$gender))\n\n# unifico los resultados de todos los algoritmos\ne <- bind_rows(\n  d_ipums |> mutate(tipo = \"ipums\"), \n  d_napp |> mutate(tipo = \"napp\"), \n  d_ssa |> mutate(tipo = \"ssa\")) |> \n  mutate(genero = as.character(genero)) |>\n  filter(genero != \"logical(0)\") |>\n  mutate(g = genero == \"male\") |>\n  reframe(p = sum(g*n)/sum(n), .by = c(year, tipo)) |> \n  mutate(p = 1 - p)\n\n# la asignación del género a partir del nombre, por cada algoritmo, lleva mucho\n# tiempo. Entonces, guardo los resultados y leo desde el archivo .tsv\ne |> \n  write_tsv(\"2023/semana_45/datos.tsv\")\n\ne <- read_tsv(\"2023/semana_45/datos.tsv\")\n\n# figura ------------------------------------------------------------------\n\n# etiquetas de los algoritmos, para agregar en el borde derecho\nalgoritmo_label <- e |> \n  filter(year == max(e$year))\n\n# función para aplicar fuente mono (victor) a los nombres de los algortimos\nf_mono_it <- (x) glue(\"<span style='font-family:victor'>{x}</span>\")\n\n# puntos de la grilla, de fondo de la figura\np <- expand.grid(\n  x = seq(1980, 2020, 10),\n  y = seq(.1, .3, .05)) |> \n  as_tibble()\n\n# título, subtítulo y aclaración del la asignación del género a partir de\n# los algoritmos\nmi_tit <- glue(\n  \"Año a año, hay másnmujeres candidatasnal Congreso de EE.UU.\") |>\n  str_to_upper()\n\nmi_sub <- glue(\n  \"Hace 40 años, hubo **10%** de candidatas mujeres a la Cámara<br>\",\n  \"de Representantes de **EE.UU.** Actualmente ronda el **30%**,<br>\",\n  \"todavía lejos de una total paridad.<br>\")\n\nmi_texto <- glue(\n  \"El porcentaje se calculó a partir del nombre del candidato<br>\",\n  \"utilizando tres algoritmos diferentes ({f_mono_it('IPUMS')},\",\n  \"{f_mono_it('NAPP')} y {f_mono_it('SSA')}).\")\n\n# figura\ng <- ggplot(e, aes(year, p, color = tipo)) +\n  # puntos de la grilla\n  annotate(geom = \"point\", x = p$x, y = p$y, color = c5, shape = 18) +\n  # líneas de los algoritmos de género\n  geom_line(alpha = .4, linewidth = 1.5, show.legend = FALSE) +\n  # puntos\n  geom_point(shape = 15, size = 4)  +\n  geom_point(shape = 18, size = 6)  +\n  geom_point(size = 1, color = \"white\", shape = 20) +\n  # etiquetas de los algoritmos\n  geom_text(\n    data = algoritmo_label, aes(year, p, label = str_to_upper(tipo)), size = 6,\n    hjust = 0, vjust = 1, nudge_x = .3, nudge_y = -.005, family = \"victor\")+\n  # título\n  annotate(\n    geom = \"text\", x = 1976, y = .3, hjust = 0, vjust = 0, label = mi_tit, \n    family = \"vast\", size = 12, color = c4) +\n  # subtítulo\n  annotate(\n    geom = \"richtext\", x = 1976, y = .295, hjust = 0, vjust = 1, label = mi_sub, \n    family = \"ubuntu\", size = 7, color = c1, fill = NA, label.color = NA) +\n  # aclaración algoritmos\n  annotate(\n    geom = \"richtext\", x = 2022, y = .05, hjust = 1, vjust = 0, \n    label = mi_texto, family = \"ubuntu\", size = 5, color = c1, fill = NA, \n    label.color = NA) +\n  scale_y_continuous(\n    breaks = seq(.05, .35, .05), limits = c(.05, .35), expand = c(0, .01),\n    labels = scales::label_percent(decimal.mark = \",\", big.mark = \".\")) +\n  scale_color_manual(values = c(c1, c2, c3)) +\n  coord_cartesian(clip = \"off\") +\n  labs(caption = mi_caption) +\n  theme_void() +\n  theme(\n    plot.margin = margin(10, 20, 10, 10),\n    plot.background = element_rect(fill = c6, color = c5,linewidth = 3),\n    plot.caption = element_markdown(\n      color = c4, size = 12, family = \"ubuntu\", margin = margin(15, 0, 10, 0)),\n    plot.caption.position = \"plot\",\n    panel.grid.major = element_line(\n      color = \"#306489\", linetype = \"8f\", linewidth = .2),\n    axis.text = element_text(color = c4),\n    axis.text.x = element_text(family = \"bebas\", size = 35),\n    axis.text.y = element_text(family = \"victor\", size = 15, vjust = 0),\n    legend.position = \"none\"\n  )\n\n# guardo\nggsave(\n  plot = g,\n  filename = \"2023/semana_45/viz.png\",\n  width = 30,\n  height = 30,\n  units = \"cm\")\n\n# abro\nbrowseURL(\"2023/semana_45/viz.png\")\n```\n:::\n\n\n\n\n# Figura\n\n![](https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2023/semana_45/viz.png)\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}