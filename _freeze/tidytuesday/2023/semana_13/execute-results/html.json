{
  "hash": "d4911f2262b725119a3cd198b4c55026",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Semana 13\"\nsubtitle: \"Figura semana 13\"\nauthor: Víctor Gauto\ndate: \"2023-04-02\"\neditor_options:\n  chunk_output_type: console\ncategories: [geom_sf, geom_label_repel, geom_rect, geom_richtext, geom_text, argentina]\nimage: https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2023/semana_13/viz.png\nexecute:\n  eval: false\n  echo: true\ncode-fold: true\n---\n\n\n\n\nHusos horarios.\n\n# Script\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# paquetes ----------------------------------------------------------------\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(here)\nlibrary(ggtext)\nlibrary(glue)\nlibrary(fontawesome)\nlibrary(sf)\nlibrary(patchwork)\nlibrary(ggrepel)\nlibrary(ggtext)\n\n# fuentes -----------------------------------------------------------------\n\nfont_add_google(name = \"Share Tech Mono\", family = \"share\") # números\nfont_add_google(name = \"Heebo\", family = \"heebo\") # resto del texto\nfont_add_google(name = \"Domine\", family = \"domine\") # título\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n# íconos\nfont_add(\"fa-reg\", here(\"icon/Font Awesome 5 Free-Regular-400.otf\"))\nfont_add(\"fa-brands\", here(\"icon/Font Awesome 5 Brands-Regular-400.otf\"))\nfont_add(\"fa-solid\", here(\"icon/Font Awesome 5 Free-Solid-900.otf\"))\n\n# caption\nicon_twitter <- \"<span style='font-family:fa-brands; color:white;'>&#xf099;</span>\"\nicon_github <- \"<span style='font-family:fa-brands; color:white;'>&#xf09b;</span>\"\nfuente <- \"<span style='color:white;'>Datos:</span> <span style='color:#16317d;'><span style='font-family:mono;'>{**tidytuesdayR**}</span> semana 13</span>\"\nautor <- \"<span style='color:white;'>Autor:</span> <span style='color:#16317d;'>**Víctor Gauto**</span>\"\nsep <- glue(\"<span style = 'color:#a4cac8;'>**|**</span>\")\nusuario <- glue(\"<span style = 'color:#16317d;'>**vhgauto**</span>\")\n\nmi_caption <- glue(\"{fuente} {sep} {autor} {sep} {icon_github} {icon_twitter} {usuario}\")\n\n# datos -------------------------------------------------------------------\n\n# browseURL(\"https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-03-28/readme.md\")\n\n# husos horarios\ntransitions <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-03-28/transitions.csv')\ntimezones <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-03-28/timezones.csv')\n\n# mapa del mundo, p/obtener el CRS únicamente\n# si uso 'crs = 4326' no queda igual, así que lo extraigo de 'world'\n# world <- rnaturalearth::ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# husos horarios Argentina\ntz_arg_tbl <- timezones |> \n  filter(str_detect(zone, \"Argentina\")) |> \n  mutate(zone = str_remove(zone, \"America/Argentina/\"))\n\n# convierto a 'sf', 4326\ntz_arg <- st_as_sf(tz_arg_tbl, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\n# provincias argentinas\n# descargado del Instituto Geográfico Nacional y convertido a .gpkg\n# https://www.ign.gob.ar/NuestrasActividades/InformacionGeoespacial/CapasSIG\n# 4326\npcias <- st_read(here(\"2023/semana_13/pcias.gpkg\"))\n\n# corrijo los nombres de las zonas\ntz_arg <- tz_arg |> \n  mutate(zone = str_replace(zone, \"_\", \" \"))\n\n# fechas de inicio/fin de horarios de verano\nverano <- transitions |> \n  filter(str_detect(zone, \"Argentina/Buenos_Aires\")) |> \n  mutate(begin = as_datetime(begin),\n         end = as_datetime(end)) |> \n  select(-zone, -offset, -abbreviation) |> \n  mutate(inicio = as_date(begin),\n         fin = as_date(end)) |> \n  drop_na() \n\neje_y_lbl <- tibble(y = seq.Date(min(verano$inicio), ymd(20100101), \"1 year\")) |> \n  mutate(fecha = ymd(glue(\"{year(y)}0101\"))) |> \n  mutate(año = year(fecha)) |> \n  mutate(decena = año %% 10 == 0) |> \n  mutate(label = if_else(decena == TRUE, glue(\"·{as.character(año)}\"), \"\")) |> \n  mutate(largo = if_else(decena == TRUE, 3, 1))\n\n# indicación 1er uso de horario de verano\nverano_1 <- verano |> \n  filter(dst == TRUE) |> \n  slice(1) |> \n  mutate(label = glue(\"En {format(inicio, '%B')} de {year(inicio)}<br>fue la primera vez en<br>aplicarse horario de verano\"))\n\n# figuras -----------------------------------------------------------------\n\n# mapa\ng1 <- ggplot() +\n  # límites provinciales, borde grueso azul\n  geom_sf(data = pcias, color = \"#16317d\", fill = NA, linewidth = 1) +\n  # límites provinciales, borde fino amarillo\n  geom_sf(data = pcias, color = \"#f6b40e\", fill = NA, linewidth = .5) +\n  \n  # ciudades\n  geom_sf(data = tz_arg, shape = 23, color = \"white\", fill = \"#16317d\",\n          size = 2) +\n  # etiquetas de las ciudades\n  geom_label_repel(data = tz_arg, aes(label = zone, geometry = geometry),\n                  stat = \"sf_coordinates\", min.segment.length = Inf,\n                  fill = alpha(\"#74acdf\", .7), label.size = 0,\n                  family = \"heebo\",\n                  size = 5, color = \"#16317d\", force = 10, seed = 2023) +\n  # manual\n  coord_sf(clip = \"on\", ylim = c(-56, -21), xlim = c(-75, -50), expand = FALSE) +\n  # tema\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#74acdf\", color = NA),\n        panel.background = element_rect(fill = \"#74acdf\", color = NA))\n\n\n# horarios de verano\ng2 <- ggplot(data = verano,\n             aes(ymin = inicio, ymax = fin, xmin = 0, xmax = 1, fill = dst)) +\n  geom_rect() +\n  # borde\n  geom_rect(ymin = min(verano$inicio), ymax = max(verano$fin), \n            xmin = 0, xmax = 1, color = \"#16317d\", fill = NA) +\n  # 1er año\n  geom_richtext(data = verano_1, aes(x = -.1, y = inicio+months(12), label = label),\n                color = \"#16317d\", fill = NA, label.color = NA, size = 4,\n                hjust = 1, vjust = 1, family = \"heebo\") +\n  geom_text(data = verano_1, aes(x = -.1, y = inicio, label = \"u25B6\"),\n            color = \"#16317d\", size = 6) +\n  # manual\n  scale_y_date(sec.axis = sec_axis(trans =  ~ .x,\n                                   breaks = eje_y_lbl$fecha,\n                                   labels = eje_y_lbl$label)) +\n  scale_fill_manual(values = c(\"#74acdf\", \"#f6b40e\"),\n                    breaks = c(TRUE, FALSE),\n                    labels = c(\"Sí     \", \"No\")) +\n  coord_cartesian(clip = \"off\", xlim = c(-1, 1), \n                  ylim = c(ymd(18900101), ymd(20100101))) +\n  # ejes\n  labs(fill = \"¿Fue año con horarionde verano?\") +\n  # guía\n  guides(fill = guide_legend(override.aes = list(shape = 22,\n                                                 color = \"#16317d\"))) +\n  theme(aspect.ratio = 7,\n        legend.position = c(.35, 0.03),\n        legend.spacing.x = unit(1, \"line\"),\n        legend.direction = \"horizontal\",\n        legend.title = element_text(family = \"heebo\", color = \"#16317d\", size = 12,\n                                    hjust = 1),\n        legend.text = element_text(color = \"#16317d\", family = \"heebo\", size = 12),\n        legend.key.width = unit(1.5, \"line\"),\n        legend.key.height = unit(1.5, \"line\"),\n        legend.background = element_rect(fill = \"#74acdf\", color = NA),\n        plot.margin = margin(0, 40, 0, 0),\n        plot.background = element_rect(fill = \"#74acdf\", color = NA),\n        panel.background = element_rect(fill = \"#74acdf\", color = NA),\n        panel.grid = element_blank(),\n        axis.title = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.ticks.length = unit(.3, \"line\"),\n        axis.ticks.y.right = element_line(color = \"#16317d\"),\n        axis.text.y.right = element_text(color = \"white\", size = 15,\n                                         family = \"share\", vjust = .45,\n                                         margin = margin(0, 0, 0, 3)))\n\n# figura compuesta\ng3 <- g1 + g2 &\n  plot_layout(widths = c(1, .25)) &\n  plot_annotation(\n    title = glue(\"Husos horarios en <span style='color:#f6b40e'>**Argentina**</span>\"),\n    subtitle = glue(\"<span style='color:white'>**Argentina**</span> tiene \n                    <span style='color:white'>**12**</span> zonas horarias, \n                    cuyas ciudades principales se muestran en<br>el mapa. El \n                    primer registro data del <span style='color:white'>**{year(min(verano$inicio))}**</span>. \n                    Los ciclos de años con <span style='color:white'>**horarios de<br>verano**</span> \n                    son dispares. A la derecha se muestran los períodos en los \n                    que tuvimos<br>que cambiar los relojes.\"),\n    caption = mi_caption,\n    theme = theme(plot.background = element_rect(color = NA, fill = \"#74acdf\"),\n                  plot.title.position = \"plot\",\n                  plot.title = element_markdown(size = 38,\n                                                family = \"domine\",\n                                                color = \"#16317d\"),\n                  plot.subtitle = element_markdown(color = \"#16317d\",\n                                                   size = 15,\n                                                   family = \"heebo\",\n                                                   margin = margin(2, 0, 2, 5)),\n\n                  plot.caption = element_markdown(hjust = .5,\n                                                  family = \"heebo\",\n                                                  margin = margin(10, 0, 0, 0),\n                                                  size = 12),\n                  plot.caption.position = \"plot\"))\n\n# guardo\nggsave(plot = g3,\n       filename = here(\"2023/semana_13/viz.png\"),\n       width = 2300,\n       height = 3300,\n       units = \"px\",\n       dpi = 300)\n\n# abro\nbrowseURL(here(\"2023/semana_13/viz.png\"))\n```\n:::\n\n\n\n\n# Figura\n\n![](https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2023/semana_13/viz.png)\n\n\n",
    "supporting": [
      "semana_13_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}