{
  "hash": "2fbe0ba23f80b00fa7fcb85a00abf8f5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Semana 07\"\nsubtitle: \"Figura semana 07\"\nauthor: Víctor Gauto\ndate: \"2023-02-19\"\neditor_options:\n  chunk_output_type: console\ncategories: [geom_vline, geom_point]\nimage: https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2023/semana_07/viz.png\nexecute:\n  eval: false\n  echo: true\ncode-fold: true\n---\n\n\n\n\nDeferencia de edad entre parejas en películas de Hollywood.\n\n# Script\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# paquetes ----------------------------------------------------------------\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(here)\nlibrary(ggtext)\nlibrary(showtext)\n\n# fuentes -----------------------------------------------------------------\n\nfont_add_google(name = \"Libre Bodoni\", family = \"libre\", db_cache = FALSE) # título\nfont_add_google(name = \"Nunito Sans\", family = \"nunito\") # resto del texto\nfont_add_google(name = \"Share Tech Mono\", family = \"share\") # números\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n# íconos\nfont_add(\"fa-reg\", here(\"icon/Font Awesome 5 Free-Regular-400.otf\"))\nfont_add(\"fa-brands\", here(\"icon/Font Awesome 5 Brands-Regular-400.otf\"))\nfont_add(\"fa-solid\", here(\"icon/Font Awesome 5 Free-Solid-900.otf\"))\n\n# datos -------------------------------------------------------------------\n\nage_gaps <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-14/age_gaps.csv')\n\n# actores ----\n\n# top 100 male, actor 1\ntop_100_m_1 <- age_gaps |> \n  filter(character_1_gender == \"man\") |> \n  # agrupo por película, por si hay múltiples parejas\n  group_by(movie_name) |> \n  distinct(actor_1_name) |> \n  ungroup() |> \n  # ordeno por cantidad y tomo los primeros 100\n  count(actor_1_name, sort = TRUE) |> \n  slice(1:100) |> \n  pull(actor_1_name)\n\n# con los actores, verifico actor 1&2\ntop_m <- bind_rows(\n  age_gaps |> \n    filter(actor_1_name %in% top_100_m_1),\n  age_gaps |> \n    filter(actor_2_name %in% top_100_m_1)) |> \n  # selecciono columnas de interés y renombro\n  select(movie_name, release_year, age_difference, actor_1_name, actor_2_name, \n         actor_1_age, actor_2_age)\n\n# si el actor es mayor, la diferencia es positiva\n# si el actor es menor, la diferencia es negativa\ndatos_m <- top_m |> \n  mutate(age_difference = case_when(actor_1_name %in% top_100_m_1 ~ age_difference,\n                                    TRUE ~ -age_difference)) |>\n  mutate(ac = if_else(age_difference >= 0, actor_1_name, actor_2_name)) |>  \n  # elijo solamente el top 100 m\n  filter(ac %in% top_100_m_1) |>\n  group_by(ac) |> \n  # obtengo la diferencia de edad media (con signo)\n  summarise(delta = mean(age_difference), .groups = \"drop\") |> \n  # ordeno los actores por delta\n  mutate(ac = fct_reorder(ac, delta)) |> \n  arrange(ac) |> \n  rename(ac1 = ac, delta1 = delta)\n\n# actrices ----\n\n# top 5 female 1\ntop_100_f_1 <- age_gaps |> \n  filter(character_2_gender == \"woman\") |> \n  # agrupo por película, por si hay múltiples parejas\n  group_by(movie_name) |> \n  distinct(actor_2_name) |> \n  ungroup() |> \n  # ordeno por cantidad y tomo los primeros 100\n  count(actor_2_name, sort = TRUE) |> \n  slice(1:100) |> \n  pull(actor_2_name)\n\n# con las actrices, verifico actriz 1&2\ntop_f <- bind_rows(\n  age_gaps |> \n    filter(actor_1_name %in% top_100_f_1),\n  age_gaps |> \n    filter(actor_2_name %in% top_100_f_1)) |> \n  # selecciono columnas de interés y renombro\n  select(movie_name, release_year, age_difference, actor_1_name, actor_2_name, \n         actor_1_age, actor_2_age)\n\n# si la actriz es mayor, la diferencia es positiva\n# si la actriz es menor, la diferencia es negativa\ndatos_f <- top_f |> \n  mutate(age_difference = case_when(actor_1_name %in% top_100_f_1 ~ age_difference,\n                                    TRUE ~ -age_difference)) |>\n  mutate(ac = if_else(age_difference >= 0, actor_1_name, actor_2_name)) |>  \n  # elijo solamente el top 100 f\n  filter(ac %in% top_100_f_1) |>\n  group_by(ac) |> \n  # obtengo la diferencia de edad media (con signo)\n  summarise(delta = mean(age_difference), .groups = \"drop\") |> \n  # ordeno los actores por delta\n  mutate(ac = fct_reorder(ac, delta)) |> \n  arrange(ac) |> \n  rename(ac2 = ac, delta2 = delta)\n\n# combino ambos datos\nf_m <- bind_cols(datos_f, datos_m)\n\n# figura ------------------------------------------------------------------\n\n# colores ppales\nc_m <- \"#fb9e4f\"\nc_f <- \"#9dd893\"\n\n# caption\nicon_twitter <- \"<span style='font-family:fa-brands; color:white;'>&#xf099;</span>\"\nicon_github <- \"<span style='font-family:fa-brands; color:white;'>&#xf09b;</span>\"\nfuente <- \"<span style='color:grey90;'>Datos:</span> <span style='color:gold;'><span style='font-family:mono;'>{**tidytuesdayR**}</span> semana 7</span>\"\nautor <- \"<span style='color:grey90;'>Autor:</span> <span style='color:gold;'>**Víctor Gauto**</span>\"\nsep <- \"<span style = 'color:#a4cac8;'>**|**</span>\"\nusuario <- \"<span style = 'color:gold;'>**vhgauto**</span>\"\n\nmi_caption <- glue(\"{fuente} {sep} {autor} {sep} {icon_github} {icon_twitter} {usuario}\")\n\n# plot\ng1 <- ggplot(data = f_m, aes(y = as.numeric(ac2))) +\n  # vertical en age_gap == 0\n  geom_vline(xintercept = 0, color = \"gold\", linewidth = 1, alpha = 1,\n             linetype = 2) +\n  # actores\n  geom_point(aes(x = delta1), color = c_m, shape = 16) +\n  # actrices\n  geom_point(aes(x = delta2), color = c_f, shape = 18) +\n  # manual\n  scale_x_continuous(labels = scales::label_number(style_positive = \"plus\",\n                                                   style_negative = \"hyphen\"),\n                     limits = c(-30, 30),\n                     expand = c(0, 0),\n                     # segundo eje horizontal arriba\n                     sec.axis = dup_axis(name = NULL)) +\n  scale_y_continuous(breaks = 1:nrow(f_m),\n                     labels = f_m$ac2,\n                     expand = c(0, 0),\n                     # segundo eje vertical a la derecha\n                     sec.axis = sec_axis(~ .,\n                                         breaks = 1:nrow(f_m),\n                                         labels = f_m$ac1)) +\n  coord_cartesian(clip = \"off\") +\n  # ejes\n  labs(y = NULL, \n       x = glue(\n         \"Diferencia de edad (en años) entre la \n         <span style='color:{c_f}'>**actriz**</span>/<span style='color:{c_m}'>**actor**</span> \n         y su pareja en pantalla\"),\n       title = \"En <span style='color:gold;'>Hollywood </span> ellos las<br> \n       prefieren jóvenes\",\n       subtitle = glue(\n         \"Se calculó la <span style='color:gold;'>**diferencia de \n         edad**</span> promedio entre las 100 \n         <span style='color:{c_f};'>**actrices**</span> \n         y <span style='color:{c_m};'>**actores**</span> más populares de \n         <span style='color:gold;'>**Hollywood**</span>. Dicha diferencia es \n         negativa cuando la persona (eje vertical) es menor que su interés \n         amoroso en pantalla. En su inmensa mayoría, \n         <span style='color:{c_m};'>**ellos**</span> tienen exclusivamente \n         parejas menores, causando que <span style='color:{c_f};'>**ellas**</span> \n         tengan parejas de mayor edad.\"),\n       caption = mi_caption,) +\n  theme_minimal() +\n  theme(aspect.ratio = 1.8,\n        axis.text.x = element_text(color = \"gold\", family = \"share\", \n                                   size = 10, face = \"bold\"),\n        axis.text.y.left = element_text(color = c_f, family = \"nunito\", \n                                        size = 8),\n        axis.text.y.right = element_text(color = c_m, family = \"nunito\", \n                                         size = 8),\n        axis.title.x.bottom = element_markdown(color = \"grey90\", family = \"nunito\"),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.y = element_line(linewidth = .05, color = \"grey30\"),\n        panel.grid.major.x = element_line(linewidth = .05, color = \"grey30\",\n                                          linetype = \"ff\"),\n        panel.grid.minor.x = element_line(linewidth = .03, color = \"grey30\"),\n        panel.background = element_rect(fill = \"grey10\", color = NA),\n        plot.background = element_rect(fill = \"grey10\", color = NA),\n        plot.title = element_markdown(size = 45, family = \"libre\", \n                                      color = \"grey90\"),\n        plot.title.position = \"plot\",\n        plot.subtitle = element_textbox_simple(color = \"grey90\", \n                                               family = \"nunito\",\n                                               margin = margin(0, 0, 10, 0)),\n        plot.caption = element_markdown(hjust = .5, family = \"nunito\",\n                                        margin = margin(10, 0, 0, 0)),\n        plot.caption.position = \"plot\")\n\n# guardo\nggsave(plot = g1,\n       filename = here(\"2023/semana_07/viz.png\"),\n       width = 2300,\n       height = 3600,\n       units = \"px\",\n       dpi = 300)\n\n# abro\nbrowseURL(here(\"2023/semana_07/viz.png\"))\n```\n:::\n\n\n\n\n# Figura\n\n![](https://raw.githubusercontent.com/vhgauto/tidytuesday/refs/heads/main/2023/semana_07/viz.png)\n\n\n",
    "supporting": [
      "semana_07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}