{
  "hash": "6ded9d06a817da58afde208e9c928644",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat:\n  html:\n    code-fold: show\n    code-summary: \"Ocultar código\"\n    code-line-numbers: false\n    code-annotations: false\n    code-link: true\n    code-tools:\n        source: true\n        toggle: true\n        caption: \"Código\"\n    code-overflow: scroll\n    page-layout: full\neditor_options:\n  chunk_output_type: console\ncategories: [\"geom_smooth\", \"geom_abline\", \"geom_point\"]\nexecute:\n  eval: false\n  echo: true\n  warning: false\ntitle: \"Semana 11\"\ndate: 2025-03-18\nauthor: Víctor Gauto\n---\n\n\n\n\nRelación entre el ancho y el alto de cocos, según su forma.\n\n![Semana 11, 2025](semana_11.png)\n\n## Paquetes\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(glue)\nlibrary(ggtext)\nlibrary(showtext)\nlibrary(ggh4x)\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n## Estilos\n\nColores.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol <- MoMAColors::moma.colors(palette_name = \"Koons\")\n```\n:::\n\n\n\n\nFuentes: Ubuntu y JetBrains Mono.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfont_add(\n  family = \"ubuntu\",\n  regular = \"././fuente/Ubuntu-Regular.ttf\",\n  bold = \"././fuente/Ubuntu-Bold.ttf\",\n  italic = \"././fuente/Ubuntu-Italic.ttf\"\n)\n\nfont_add(\n  family = \"jet\",\n  regular = \"././fuente/JetBrainsMonoNLNerdFontMono-Regular.ttf\"\n)\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n```\n:::\n\n\n\n\n## Epígrafe\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfuente <- glue(\n    \"Datos: <span style='color:{col[5]};'><span style='font-family:jet;'>\",\n    \"{{<b>tidytuesdayR</b>}}</span> semana 11,<br>\",\n    \"<b>{{palmtrees}}</b></span>, Emil Hvitfeldt.\"\n)\n\nautor <- glue(\"<span style='color:{col[5]};'>**Víctor Gauto**</span>\")\nicon_twitter <- glue(\"<span style='font-family:jet;'>&#xf099;</span>\")\nicon_instagram <- glue(\"<span style='font-family:jet;'>&#xf16d;</span>\")\nicon_github <- glue(\"<span style='font-family:jet;'>&#xf09b;</span>\")\nicon_mastodon <- glue(\"<span style='font-family:jet;'>&#xf0ad1;</span>\")\nicon_bsky <- glue(\"<span style='font-family:jet;'>&#xe28e;</span>\")\nusuario <- glue(\"<span style='color:{col[5]};'>**vhgauto**</span>\")\nsep <- glue(\"**|**\")\n\nmi_caption <- glue(\n  \"{fuente}<br><br>{autor} {sep} {icon_github} {icon_twitter} {icon_instagram} \",\n  \"{icon_mastodon} {icon_bsky} {usuario}\"\n)\n```\n:::\n\n\n\n\n## Datos\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata <- tidytuesdayR::tt_load(2025, 11)\npalmtrees <- tuesdata$palmtrees\n```\n:::\n\n\n\n\n## Procesamiento\n\nMe interesa la relación entre el ancho y el largo de los cocos según su forma.\n\nRemuevo formas con poca cantidad de datos y obtengo el máximo valor entre largo y ancho.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- palmtrees |>\n  drop_na(average_fruit_width_cm, average_fruit_length_cm, fruit_shape) |>\n  filter(!fruit_shape %in% c(\"rounded\", \"fusiform\"))\n\nd_max <- d |>\n  reframe(\n    largo = max(average_fruit_length_cm),\n    ancho = max(average_fruit_width_cm),\n    .by = fruit_shape\n  ) |>\n  mutate(l = if_else(largo > ancho, largo, ancho)) |>\n  arrange(fruit_shape) |>\n  pull(l)\n```\n:::\n\n\n\n\nModifico los límites convenientemente y genero los ejes (vertical y horizontal) de los paneles.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_max[2] <- 10\nd_max[4] <- 15\n\neje_y <- list(\n  scale_y_continuous(\n    limits = c(0, d_max[1])\n  ),\n  scale_y_continuous(\n    limits = c(0, d_max[2]),\n    breaks = seq(0, d_max[2], 2)\n  ),\n  scale_y_continuous(\n    limits = c(0, d_max[3])\n  ),\n  scale_y_continuous(\n    limits = c(0, d_max[4])\n  ),\n  scale_y_continuous(\n    limits = c(0, d_max[5])\n  )\n)\n\neje_x <- list(\n  scale_x_continuous(\n    limits = c(0, d_max[1])\n  ),\n  scale_x_continuous(\n    limits = c(0, d_max[2]),\n    breaks = seq(0, d_max[2], 2)\n  ),\n  scale_x_continuous(\n    limits = c(0, d_max[3])\n  ),\n  scale_x_continuous(\n    limits = c(0, d_max[4])\n  ),\n  scale_x_continuous(\n    limits = c(0, d_max[5])\n  )\n)\n```\n:::\n\n\n\n\nAgrego las traducciones de las formas\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformas <- sort(unique(d$fruit_shape))\nformas_trad <- c(\"Elipsoide\", \"Elongado\", \"Globosa\", \"Ovoide\", \"Piramidal\")\nformas_trad <- set_names(formas_trad, formas)\n```\n:::\n\n\n\n\n## Figura\n\nLogo del paquete [`{palmtrees}`](https://github.com/EmilHvitfeldt/palmtrees/) y título.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlink <- \"https://raw.githubusercontent.com/EmilHvitfeldt/palmtrees/refs/heads/main/man/figures/logo.png\"\nlogo <- glue(\"<img src='{link}' width=100 />\")\n\nmi_titulo <- glue(\n  \"Relación entre ancho y alto de <b style='color: {col[4]}'>cocos</b> según\n  su forma\"\n)\n```\n:::\n\n\n\n\nFigura.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggplot(\n  d, aes(\n    average_fruit_width_cm, average_fruit_length_cm, fill = fruit_shape,\n    shape = fruit_shape, color = fruit_shape\n  )\n) +\n  geom_smooth(method = \"lm\", se = FALSE, formula = y ~ x) +\n  geom_abline(linetype = 2, color = \"grey10\", linewidth = 1) +\n  geom_point(size = 7, color = \"grey20\", alpha = .8) +\n  facet_wrap(\n    vars(fruit_shape), nrow = 3, scales = \"free\", labeller = as_labeller(formas_trad)\n  ) +\n  facetted_pos_scales(x = eje_x, y = eje_y) +\n  scale_color_manual(\n    breaks = formas,\n    labels = formas_trad,\n    values = col\n  ) +\n  scale_fill_manual(\n    breaks = formas,\n    labels = formas_trad,\n    values = col\n  ) +\n  scale_shape_manual(\n    breaks = formas,\n    labels = formas_trad,\n    values = c(21, 24, 23, 21, 24, 23, 21)\n  ) +\n  coord_cartesian(clip = \"off\") +\n  labs(\n    title = mi_titulo,\n    tag = logo,\n    caption = mi_caption,\n    x = \"Ancho promedio de la fruta (cm)\",\n    y = \"Largo promedio de la fruta (cm)\"\n  ) +\n  theme_minimal(base_size = 20, base_family = \"ubuntu\") +\n  theme(\n    text = element_text(family = \"ubuntu\"),\n    aspect.ratio = 1,\n    plot.margin = margin(t = 50),\n    plot.background = element_rect(fill = \"grey90\", color = NA),\n    plot.title = element_markdown(\n      margin = margin(l = 60, b = 45), hjust = 0, color = col[1], face = \"bold\",\n      lineheight = 1.3, size = 26\n    ),\n    plot.tag = element_markdown(),\n    plot.tag.location = \"plot\",\n    plot.tag.position = c(.07, .99),\n    plot.caption = element_markdown(\n      color = col[4], face = \"bold\", lineheight = 1.3, size = 20,\n      margin = margin(t = -160, b = 80, r = -10)\n    ),\n    legend.position = \"none\",\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank(),\n    panel.spacing.y = unit(40, \"pt\"),\n    panel.spacing.x = unit(60, \"pt\"),\n    axis.text = element_text(family = \"jet\", color = \"black\"),\n    axis.title.y = element_text(hjust = 1),\n    axis.title.x = element_text(hjust = 0, margin = margin(t = 20)),\n    strip.text = element_text(face = \"bold\", hjust = 0, size = 21)\n  )\n```\n:::\n\n\n\n\nGuardo.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\n  plot = g,\n  filename = \"tidytuesday/2025/semana_11.png\",\n  width = 30,\n  height = 47,\n  units = \"cm\"\n)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}