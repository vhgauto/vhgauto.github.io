{
  "hash": "5056f403443f6c9eb581a056e9730421",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat:\n  html:\n    code-fold: show\n    code-summary: \"Ocultar código\"\n    code-line-numbers: false\n    code-annotations: false\n    code-link: true\n    code-tools:\n        source: true\n        toggle: true\n        caption: \"Código\"\n    code-overflow: scroll\n    page-layout: full\neditor_options:\n  chunk_output_type: console\ncategories:\n  - GEOM_AAA\n  - GEOM_BBB\n  - GEOM_CCC\nexecute:\n  eval: false\n  echo: true\n  warning: false\ntitle: \"Semana 42\"\ndate: last-modified\nauthor: Víctor Gauto\n---\n\n[Estaciones meteorológicas de Reino Unido](https://www.metoffice.gov.uk/) y cantidad de horas de Sol.\n\n\n::: {.column-page-right}\n\n![Semana 42, 2025](semana_42.png)\n\n:::\n\n## Paquetes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(glue)\nlibrary(ggtext)\nlibrary(showtext)\nlibrary(tidyterra)\nlibrary(tidyverse)\n```\n:::\n\n\n## Estilos\n\nColores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc1 <- \"grey30\"\nc2 <- \"grey90\"\nc3 <- \"black\"\nc4 <- \"#D6DF23\"\n```\n:::\n\n\nFuentes: Ubuntu y JetBrains Mono.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfont_add(\n  family = \"ubuntu\",\n  regular = \"././fuente/Ubuntu-Regular.ttf\",\n  bold = \"././fuente/Ubuntu-Bold.ttf\",\n  italic = \"././fuente/Ubuntu-Italic.ttf\"\n)\n\nfont_add(\n  family = \"jet\",\n  regular = \"././fuente/JetBrainsMonoNLNerdFontMono-Regular.ttf\"\n)\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n```\n:::\n\n\n## Epígrafe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfuente <- glue(\n  \"Datos: <span style='color:{c4};'><span style='font-family:jet;'>\",\n  \"{{<b>tidytuesdayR</b>}}</span> semana 42, \",\n  \"<b>UK Met Office</b>.</span>\"\n)\n\nautor <- glue(\"<span style='color:{c4};'>**Víctor Gauto**</span>\")\nicon_twitter <- glue(\"<span style='font-family:jet;'>&#xf099;</span>\")\nicon_instagram <- glue(\"<span style='font-family:jet;'>&#xf16d;</span>\")\nicon_github <- glue(\"<span style='font-family:jet;'>&#xf09b;</span>\")\nicon_mastodon <- glue(\"<span style='font-family:jet;'>&#xf0ad1;</span>\")\nicon_bsky <- glue(\"<span style='font-family:jet;'>&#xe28e;</span>\")\nusuario <- glue(\"<span style='color:{c4};'>**vhgauto**</span>\")\nsep <- glue(\"**|**\")\n\nmi_caption <- glue(\n  \"{fuente}<br>{autor} {sep} {icon_github} {icon_twitter} {icon_instagram} \",\n  \"{icon_mastodon} {icon_bsky} {usuario}\"\n)\n```\n:::\n\n\n## Datos\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata <- tidytuesdayR::tt_load(2025, 42)\nhistoric_station_met <- tuesdata$historic_station_met\nstation_meta <- tuesdata$station_meta\n```\n:::\n\n\n## Procesamiento\n\nMe interesa indicar los sitios de las estaciones meteorológicas y la cantidad de horas solares.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- terra::vect(station_meta, geom = c(\"lng\", \"lat\"), crs = \"EPSG:4326\")\n```\n:::\n\n\nObtengo las fronteras de Reino Unido y condados.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuk1 <- rgeoboundaries::gb_adm1(country = \"GBR\") |>\n  terra::vect()\n\nuk2 <- rgeoboundaries::gb_adm2(country = \"GBR\") |>\n  terra::vect()\n```\n:::\n\n\nCalculo la cantidad promedio de horas solares en cada estación meteorológica.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- historic_station_met |>\n  reframe(\n    m = mean(sun, na.rm = TRUE),\n    .by = station\n  ) |>\n  inner_join(terra::as.data.frame(p, geom = \"xy\"), by = join_by(station)) |>\n  terra::vect(geom = c(\"x\", \"y\"), crs = \"EPSG:4326\")\n```\n:::\n\n\n## Figura\n\nTítulo de la figura, título de la leyenda y logo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_titulo <- glue(\n  \"Estaciones Meteorológicas<br>de <b style='color: {c4};'>Reino Unido</b> \",\n  \"y cantidad<br>de horas solares mensuales\"\n)\n\nmi_leyenda <- glue(\"Horas de<br><b style='color: {c4}'>Sol</b> al mes\")\n\nlogo_tbl <- tibble(\n  image = \"https://upload.wikimedia.org/wikipedia/en/thumb/f/f4/Met_Office.svg/768px-Met_Office.svg.png\",\n  x = I(.9),\n  y = I(.65)\n)\n```\n:::\n\n\nFigura.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggplot() +\n  geom_spatvector(\n    data = uk2,\n    alpha = 1,\n    fill = c2,\n    color = c1,\n    linewidth = .2,\n    show.legend = FALSE\n  ) +\n  geom_spatvector(data = uk1, fill = NA, linewidth = .7, color = c1) +\n  geom_spatvector(\n    data = v,\n    aes(fill = m),\n    size = 15,\n    shape = 21,\n    color = c3\n  ) +\n  ggimage::geom_image(\n    data = logo_tbl,\n    aes(x, y, image = image),\n    inherit.aes = FALSE,\n    size = .1\n  ) +\n  annotate(\n    geom = \"richtext\",\n    x = I(-.02),\n    y = I(.99),\n    label = mi_titulo,\n    family = \"ubuntu\",\n    size = 12,\n    color = c2,\n    hjust = 0,\n    vjust = 1,\n    fill = NA,\n    label.color = NA\n  ) +\n  scico::scale_fill_scico(palette = \"buda\", breaks = scales::breaks_width(10)) +\n  coord_sf(expand = FALSE, clip = \"off\") +\n  labs(\n    fill = mi_leyenda,\n    caption = mi_caption\n  ) +\n  theme_void(base_size = 26, base_family = \"ubuntu\") +\n  theme(\n    plot.background = element_rect(fill = c1),\n    plot.margin = margin(t = 10, b = 10),\n    plot.caption = element_markdown(\n      color = c2,\n      hjust = .5,\n      lineheight = 1.3,\n      margin = margin(t = 55)\n    ),\n    legend.position = \"inside\",\n    legend.position.inside = c(0, 0),\n    legend.justification.inside = c(0, 0),\n    legend.title = element_markdown(\n      margin = margin(b = 15, l = -30),\n      color = c2,\n      hjust = .5\n    ),\n    legend.text = element_text(\n      family = \"jet\",\n      size = rel(.7),\n      margin = margin(l = 5),\n      color = c2\n    ),\n    legend.key.width = unit(30, \"pt\"),\n    legend.key.height = unit(70, \"pt\"),\n    legend.box.spacing = unit(0, \"pt\"),\n    legend.ticks = element_line(linewidth = 1, color = c1)\n  )\n```\n:::\n\n\nGuardo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\n  plot = g,\n  filename = \"tidytuesday/2025/semana_42.png\",\n  width = 30,\n  height = 53,\n  units = \"cm\"\n)\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}