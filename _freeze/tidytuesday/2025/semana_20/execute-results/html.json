{
  "hash": "7bc403cb43d748c8a1177a2a3ba4a552",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat:\n  html:\n    code-fold: show\n    code-summary: \"Ocultar código\"\n    code-line-numbers: false\n    code-annotations: false\n    code-link: true\n    code-tools:\n        source: true\n        toggle: true\n        caption: \"Código\"\n    code-overflow: scroll\n    page-layout: full\neditor_options:\n  chunk_output_type: console\ncategories:\n  - geom_spatvector\n  - geom_spatvector_text\n  - geom_spatraster\n  - geom_richtext\nexecute:\n  eval: false\n  echo: true\n  warning: false\ntitle: \"Semana 20\"\ndate: last-modified\nauthor: Víctor Gauto\n---\n\nPlayas en Sydney, Australia, indicando la región a la que pertenecen.\n\n![Semana 20, 2025](semana_20.png)\n\n## Paquetes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(glue)\nlibrary(ggtext)\nlibrary(showtext)\nlibrary(patchwork)\nlibrary(terra)\nlibrary(magick)\nlibrary(tidyterra)\nlibrary(tidyverse)\n```\n:::\n\n\n## Estilos\n\nColores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc1 <- \"#2539AF\"\nc2 <- \"#CB5252\"\nc3 <- \"#824290\"\nc4 <- \"white\"\n```\n:::\n\n\nFuentes: Ubuntu y JetBrains Mono.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfont_add(\n  family = \"ubuntu\",\n  regular = \"././fuente/Ubuntu-Regular.ttf\",\n  bold = \"././fuente/Ubuntu-Bold.ttf\",\n  italic = \"././fuente/Ubuntu-Italic.ttf\"\n)\n\nfont_add(\n  family = \"jet\",\n  regular = \"././fuente/JetBrainsMonoNLNerdFontMono-Regular.ttf\"\n)\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n```\n:::\n\n\n## Epígrafe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfuente <- glue(\n    \"Datos: <span style='color:{c1};'><span style='font-family:jet;'>\",\n    \"{{<b>tidytuesdayR</b>}}</span> semana 20,<br>\",\n    \"<b>New South Wales State<br>Government Beachwatch</b>.</span>\"\n)\n\nautor <- glue(\"<span style='color:{c1};'>**Víctor Gauto**</span>\")\nicon_twitter <- glue(\"<span style='font-family:jet;'>&#xf099;</span>\")\nicon_instagram <- glue(\"<span style='font-family:jet;'>&#xf16d;</span>\")\nicon_github <- glue(\"<span style='font-family:jet;'>&#xf09b;</span>\")\nicon_mastodon <- glue(\"<span style='font-family:jet;'>&#xf0ad1;</span>\")\nicon_bsky <- glue(\"<span style='font-family:jet;'>&#xe28e;</span>\")\nusuario <- glue(\"<span style='color:{c1};'>**vhgauto**</span>\")\nsep <- glue(\"**|**\")\n\nmi_caption <- glue(\n  \"{fuente}<br>{autor} {sep} {icon_github} {icon_twitter} {icon_instagram} \",\n  \"{icon_mastodon} {icon_bsky} {usuario}\"\n)\n```\n:::\n\n\n## Datos\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata <- tidytuesdayR::tt_load(2025, 20)\nwater_quality <- tuesdata$water_quality\n```\n:::\n\n\n## Procesamiento\n\nMe interesa la posición de las playas y la región.\n\nRemuevo playas que se encuentran en el extremo Oeste, removiendo aquellas playas que tengan valores mínimos de longitud geográfica.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlon <- water_quality |> \n  distinct(longitude) %>%\n  slice_max(order_by = longitude, n = nrow(.)-7)\n```\n:::\n\n\nAl combinar las longitudes geográficas con los datos, convierto a vector y obtengo su extensión.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- water_quality |> \n  select(region, latitude, longitude) |> \n  inner_join(lon, by = join_by(longitude)) |> \n  distinct() |> \n  vect(geom = c(\"longitude\", \"latitude\"), crs = \"EPSG:4326\")\n\nbbox <- vect(ext(v), crs(v))\n```\n:::\n\n\nObtengo el vector de Australia, recorto a la región de las playas y descargo el ráster de elevación.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naus <- rgeoboundaries::gb_adm0(country = \"AUS\") |> \n  vect()\n\naus_crop <- terra::crop(aus, bbox)\n\nelev_r <- elevatr::get_elev_raster(\n  locations = sf::st_as_sf(aus_crop),\n  z = 13,\n  clip = \"locations\"\n) |> \n  rast()\n```\n:::\n\n\nRemuevo valores anormales con una mediana de ventana 3x3 y renombro la variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelev <- terra::focal(elev_r, w = 3, fun = median)\nnames(elev) <- \"altura\"\nelev[elev < -50] <- NA\n```\n:::\n\nRecorto el vector de Australia.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbbox_aus <- ext(110, 157, ext(aus)$ymin, ext(aus)$ymax) |> \n  vect(crs = crs(aus))\n\naus_mapa <- crop(aus, bbox_aus)\n```\n:::\n\n\n# Figura\n\nEl mapa final está compuesto de dos figuras: el mapa principal de las playas en Sydney, y uno más pequeño con el mapa de Australia, indicando la región de interés.\n\n## Mapa de Australia\n\nVector punto de la ciudad de [Sydney](https://geohack.toolforge.org/geohack.php?pagename=Sydney&params=33_52_S_151_12_E_type:city_region:AU-NSW).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsydney <- tibble(\n  x = 151.2,\n  y = -33.866667,\n  label = \"Sydney\"\n) |> \n  vect(geom = c(\"x\", \"y\"), crs = crs(v))\n```\n:::\n\n\nCreo mapa indicando la ubicación y nombre de Sydney. Guardo figura.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_aus <- ggplot() +\n  geom_spatvector(data = aus_mapa, fill = c1, color = NA) +\n  geom_spatvector(\n    data = sydney, size = 4, color = c3, shape = 21, fill = c4, stroke = 1\n  ) +\n  geom_spatvector_text(\n    data = sydney, aes(label = label), hjust = 1, vjust = -.6, color = c4,\n    family = \"ubuntu\", size = 7\n  ) +\n  coord_sf(expand = FALSE) +\n  theme_void() +\n  theme(\n    plot.margin = margin(0, 0, 0, 0),\n    plot.background = element_blank()\n  )\n\nggsave(\n  plot = g_aus,\n  filename = \"tidytuesday/2025/australia.png\",\n  width = 1000,\n  height = 1000,\n  units = \"px\"\n)\n```\n:::\n\n\n## Mapa de playas\n\nCreo una función para indicar la posición vertical de las anotaciones según la fracción de la altura disponible.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naltura_label <- function(x) ext(bbox)$ymin + (ext(bbox)$ymax-ext(bbox)$ymin)*x\n```\n:::\n\n\nCreo subtítulo, fuente de datos y autor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_subitulo_tbl <- tibble(\n  x = ext(bbox)$xmax*1.0001,\n  y = altura_label(1),\n  label = \"Playas de\\nSydney\"\n) |> \n  vect(geom = c(\"x\", \"y\"), crs = crs(v))\n\nmi_caption_tbl <- tibble(\n  x = ext(bbox)$xmax*.9997,\n  y = altura_label(.1),\n  label = mi_caption\n)\n```\n:::\n\n\nMapa con la ubicación de las playas. Guardo la figura.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggplot() +\n  geom_spatraster(\n    data = elev, aes(fill = altura), \n    maxcell = prod(dim(elev)),\n    show.legend = FALSE\n  ) +\n  geom_spatvector(\n    data = v, aes(shape = region), size = 7, alpha = .8, fill = c3,\n    color = c4\n  ) +\n  geom_spatvector_text(\n    data = mi_subitulo_tbl, aes(label = label), family = \"ubuntu\", size = 23,\n    hjust = 0, vjust = 1, color = c3, fontface = \"bold\"\n  ) +\n  geom_richtext(\n    data = mi_caption_tbl, aes(x, y, label = label), inherit.aes = FALSE,\n    size = 24/.pt, hjust = 0, vjust = 1, family = \"ubuntu\", fill = NA,\n    label.colour = NA, color = c2\n  ) +\n  scale_fill_grass_c(palette = \"haxby\") +\n  scale_shape_manual(\n    breaks = unique(v$region),\n    values = c(21, 22, 23, 24),\n    labels = c(\n      \"Bahía de Sydney\", \"Sydney Norte\", \"Sydney Sur\", \"Sidney Capital\"\n    )\n  ) +\n  coord_sf(expand = FALSE, clip = \"off\") +\n  labs(shape = NULL) +\n  theme_void(base_family = \"ubuntu\", base_size = 20) +\n  theme(\n    plot.margin = margin(r = 80, t = 15, l = 10, b = 15),\n    plot.background = element_rect(fill = c4, color = NA),\n    legend.position = \"right\",\n    legend.justification.right = c(.5, .3),\n    legend.text = element_text(size = rel(1.2), color = c2),\n    legend.key.spacing.y = unit(10, \"pt\")\n  )\n\nggsave(\n  plot = g,\n  filename = \"tidytuesday/2025/playa.png\",\n  width = 30,\n  height = 46,\n  units = \"cm\"\n)\n```\n:::\n\n\n## Mapa compuesto\n\nLeo ambos mapas y agrego el de Australia, de menor tamaño, sobre el mapa de playas. Guardo la figura final.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimg_aus <- image_read(\"tidytuesday/2025/australia.png\") |> \n  image_scale(geometry = \"1300x\")\n\nimg_playa <- image_read(\"tidytuesday/2025/playa.png\")\n\nimg_playa |>\n  image_composite(img_aus, gravity = \"northeast\", offset = \"+150+1400\") |>\n  image_write(path = \"tidytuesday/2025/semana_20.png\")\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}