{
  "hash": "002afbb4f2209d3ea4de365b5304312b",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat:\n  html:\n    code-fold: show\n    code-summary: \"Ocultar código\"\n    code-line-numbers: false\n    code-annotations: false\n    code-link: true\n    code-tools:\n        source: true\n        toggle: true\n        caption: \"Código\"\n    code-overflow: scroll\n    page-layout: full\nauto-play-media: true\neditor_options:\n  chunk_output_type: console\ncategories:\n  - video\nexecute:\n  eval: false\n  echo: true\n  warning: false\ntitle: \"Semana 29\"\ndate: last-modified\nauthor: Víctor Gauto\n---\n\nAnimación con las obras de arte del [Metropolitan Transportation Authority](https://www.mta.info/agency/arts-design) de Nueva York.\n\n![Semana 29, 2025](semana_29.mp4){loop=\"true\"}\n\n<!-- {{< video semana_29.mp4 loop=\"true\" title=\"Semana 29, 2025\" >}} -->\n\n## Paquetes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magick)\nlibrary(rvest)\nlibrary(tidyverse)\n```\n:::\n\n\n## Estilos\n\nColores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc1 <- \"#FDE333\"\nc2 <- \"#8B0069\"\n```\n:::\n\n\n## Datos\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata <- tidytuesdayR::tt_load(2025, 29)\nmta_art <- tuesdata$mta_art\n```\n:::\n\n\n## Procesamiento\n\nMe interesa las imágenes de las obras y generar un video mostrándolas.\n\nFunción para leer los sitios web y extraer un link de la imagen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf_img <- function(x) {\n  l <- read_html(x) |> \n    html_elements(\"img\") |> \n    html_attr(\"src\")\n  \n  l[1]\n}\n```\n:::\n\n\nFunción para recortar la imagen, agregar el nombre de la estación y autor, y descargar el archivo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf_jpg <- function(A, B, C) {\n  prop <- image_read(B) |> \n    image_info()\n\n  pos_x <- round(prop$width/2)\n  pos_y <- round(prop$height/2)\n\n  image_read(B) |> \n    image_crop(\n      geometry = geometry_area(\n        width = tamaño,\n        height = tamaño,\n        x_off = pos_x-tamaño/2,\n        y_off = pos_y-tamaño/2\n      )\n    ) |> \n    image_annotate(\n      text = A,\n      gravity = \"northwest\",\n      location = \"+5+5\",\n      size = 23,\n      font = \"Times New Roman\",\n      color = c1,\n      boxcolor = c2\n    ) |> \n    image_annotate(\n      text = \"@vhgauto\",\n      gravity = \"southeast\",\n      location = \"+5+5\",\n      size = 23,\n      font = \"Monotype Corsiva\",\n      weight = 800,\n      color = c1,\n      boxcolor = c2\n    ) |> \n    image_write(\n      paste0(\"tidytuesday/2025/.mta/\", C, \".jpg\")\n    )\n}\n```\n:::\n\n\nSelecciono los enlaces y nombres de las estaciones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- mta_art |> \n  select(station_name, art_image_link) |> \n  drop_na() |> \n  filter(!str_detect(art_image_link, \"http://web\")) |> \n  mutate(img = map(art_image_link, f_img)) |> \n  unnest(img) |> \n  distinct(img, .keep_all = TRUE) |> \n  arrange(station_name) |> \n  mutate(nombre = paste0(row_number(), \"-\", station_name)) |> \n  mutate(nombre = str_replace_all(nombre, \"/\", \"\"))\n```\n:::\n\n\nDefino el tamaño de las imágenes y proceso las imágenes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntamaño <- 600\n\npmap(\n  list(\n    d$station_name,\n    d$img,\n    d$nombre\n  ),\n  f_jpg\n)\n```\n:::\n\n\n## Animación\n\nSe leen todas las imágenes y se genera una animación.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nav::av_encode_video(\n  input = list.files(\n    path = \"tidytuesday/2025/.mta/\",\n    full.names = TRUE, pattern = \".jpg\"\n  ),\n  framerate = 3,\n  output = \"tidytuesday/2025/semana_29.mp4\"\n)\n```\n:::\n\n\nElimino las imágenes descargadas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunlink(\"tidytuesday/2025/.mta/\", recursive = TRUE)\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}