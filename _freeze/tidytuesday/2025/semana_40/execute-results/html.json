{
  "hash": "07a5901a8a49873622bfd8be5fd6d4f8",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat:\n  html:\n    code-fold: show\n    code-summary: \"Ocultar código\"\n    code-line-numbers: false\n    code-annotations: false\n    code-link: true\n    code-tools:\n        source: true\n        toggle: true\n        caption: \"Código\"\n    code-overflow: scroll\n    page-layout: full\neditor_options:\n  chunk_output_type: console\ncategories:\n  - geom_spatvector\n  - geom_label_repel\n  - geom_image\nexecute:\n  eval: false\n  echo: true\n  warning: false\ntitle: \"Semana 40\"\ndate: last-modified\nauthor: Víctor Gauto\n---\n\nMapa de las ciudades de los equipos de la **EuroLeague Basketball**.\n\n::: {.column-page-right}\n\n![Semana 40, 2025](semana_40.png)\n\n:::\n\n## Paquetes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(glue)\nlibrary(ggtext)\nlibrary(showtext)\nlibrary(tidyterra)\nlibrary(terra)\nlibrary(tidyverse)\n```\n:::\n\n\n## Estilos\n\nColores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc1 <- \"#FA5500\"\nc2 <- \"grey90\"\nc3 <- \"grey80\"\nc4 <- \"grey70\"\nc5 <- \"grey50\"\nc6 <- \"grey40\"\nc7 <- \"grey20\"\nc8 <- \"grey10\"\nc9 <- \"black\"\n```\n:::\n\n\nFuentes: Ubuntu y JetBrains Mono.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfont_add(\n  family = \"ubuntu\",\n  regular = \"././fuente/Ubuntu-Regular.ttf\",\n  bold = \"././fuente/Ubuntu-Bold.ttf\",\n  italic = \"././fuente/Ubuntu-Italic.ttf\"\n)\n\nfont_add(\n  family = \"jet\",\n  regular = \"././fuente/JetBrainsMonoNLNerdFontMono-Regular.ttf\"\n)\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n```\n:::\n\n\n## Epígrafe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfuente <- glue(\n  \"Datos: <span style='color:{c7};'><span style='font-family:jet;'>\",\n  \"{{<b>tidytuesdayR</b>}}</span> semana 40, \",\n  \"<b style='font-family:jet;'>{{EuroleagueBasketball}}</b>.</span>\"\n)\n\nautor <- glue(\"<span style='color:{c7};'>**Víctor Gauto**</span>\")\nicon_twitter <- glue(\"<span style='font-family:jet;'>&#xf099;</span>\")\nicon_instagram <- glue(\"<span style='font-family:jet;'>&#xf16d;</span>\")\nicon_github <- glue(\"<span style='font-family:jet;'>&#xf09b;</span>\")\nicon_mastodon <- glue(\"<span style='font-family:jet;'>&#xf0ad1;</span>\")\nicon_bsky <- glue(\"<span style='font-family:jet;'>&#xe28e;</span>\")\nusuario <- glue(\"<span style='color:{c7};'>**vhgauto**</span>\")\nsep <- glue(\"**|**\")\n\nmi_caption <- glue(\n  \"{fuente}<br>{autor} {sep} {icon_github} {icon_twitter} {icon_instagram} \",\n  \"{icon_mastodon} {icon_bsky} {usuario}\"\n)\n```\n:::\n\n\n## Datos\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata <- tidytuesdayR::tt_load(2025, 40)\nbasketball <- tuesdata$euroleague_basketball\n```\n:::\n\n\n## Procesamiento\n\nMe interesa crear un mapa con las ciudades de los equipos participantes.\n\nUtilizo el paquete [`ggmap`](https://github.com/dkahle/ggmap) para obtener las coordenadas de los sitios a partir del nombre de la ciudad. Esto requiere contar con el [token](https://github.com/dkahle/ggmap?tab=readme-ov-file#google-maps-api-key) correspondiente.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggmap::register_google(key = \"XXXXXXXXXX\")\n\nd <- basketball |>\n  janitor::clean_names() |>\n  select(team, home_city) |>\n  mutate(coord = ggmap::geocode(home_city)) |>\n  unnest(coord)\n```\n:::\n\n\nConvierto los datos a un vector, obtengo el centroide para ubicar el mapa y genero el sistema de referencias ortográfica.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- terra::vect(d, geom = c(\"lon\", \"lat\"), crs = \"EPSG:4326\")\n\no <- ext(p) |>\n  vect(crs = \"EPSG:4326\") |>\n  centroids()\n\nox <- terra::geom(o)[1, \"x\"]\noy <- terra::geom(o)[1, \"y\"]\n\northo_crs <- glue(\n  \"+proj=ortho +lat_0={oy} +lon_0={oy} +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs +type=crs\"\n)\n```\n:::\n\n\nAgrego saltos de línea y reproyecto el vector de ciudades.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np$team <- str_replace(p$team, \" \", \"\\n\")\np_ortho <- project(p, ortho_crs)\n```\n:::\n\n\nVector de polígonos de países del mundo, con proyección ortográfica. Identifico los países de las ciudades de los equipos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- rgeoboundaries::geoboundaries() |>\n  terra::vect()\n\nw_ortho <- project(w, ortho_crs)\n\nequipo_pais <- intersect(w_ortho, p_ortho)$shapeName\n\nw_ortho$equipo <- w_ortho$shapeName %in% equipo_pais\n```\n:::\n\n\nExtensión para hacer zoom en el mapa, a partir del vector de ciudades de los equipos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_ext <- vect(ext(p_ortho) * 1.25, crs = \"EPSG:4326\") |>\n  ext()\n```\n:::\n\n\n## Figura\n\nLink y tibble para incorporar el logo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogo <- \"https://upload.wikimedia.org/wikipedia/en/thumb/5/58/EuroLeague.svg/1280px-EuroLeague.svg.png\"\n\nlogo_tbl <- tibble(\n  x = I(.2),\n  y = I(.1),\n  image = logo\n)\n```\n:::\n\n\nTítulo y figura.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_titulo <- glue(\n  \"Equipos participantes de la<br>\",\n  \"<b style='color: {c1};'>EuroLeague Basketball</b>\"\n)\n\ng <- ggplot() +\n  geom_spatvector(\n    data = w_ortho,\n    aes(fill = equipo),\n    color = c2,\n    linetype = 1,\n    linewidth = .2,\n    show.legend = FALSE\n  ) +\n  geom_spatvector(\n    data = p_ortho,\n    shape = 21,\n    color = c9,\n    fill = c1,\n    stroke = .6,\n    size = 2\n  ) +\n  ggrepel::geom_label_repel(\n    data = sf::st_as_sf(p_ortho),\n    aes(geometry = geometry, label = team),\n    stat = \"sf_coordinates\",\n    lineheight = .7,\n    label.size = 0,\n    label.r = 0,\n    size = 3.5,\n    min.segment.length = 0,\n    color = c8,\n    fill = c4,\n    family = \"ubuntu\",\n    hjust = 0,\n    vjust = 1,\n    seed = 2024,\n    show.legend = FALSE\n  ) +\n  ggimage::geom_image(\n    data = logo_tbl,\n    aes(x, y, image = image),\n    size = .5\n  ) +\n  annotate(\n    geom = \"richtext\",\n    label = c(mi_titulo, mi_caption),\n    x = I(c(1, 1)),\n    y = I(c(1, 0)),\n    hjust = 1,\n    vjust = c(1, 0),\n    family = \"ubuntu\",\n    label.padding = unit(c(.6, .4), \"lines\"),\n    size = c(12, 3),\n    fill = NA,\n    lineheight = 1.3,\n    label.color = NA,\n    color = c(c9, c1)\n  ) +\n  coord_sf(xlim = c(p_ext$xmin, p_ext$xmax), ylim = c(p_ext$ymin, p_ext$ymax)) +\n  scale_fill_manual(\n    breaks = c(TRUE, FALSE),\n    values = c(c6, c3)\n  ) +\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = c2)\n  )\n```\n:::\n\n\nGuardo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\n  plot = g,\n  filename = \"tidytuesday/2025/semana_40.png\",\n  width = 30,\n  height = 19.9,\n  units = \"cm\"\n)\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}