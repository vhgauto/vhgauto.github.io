{
  "hash": "0e60541da3e00bda394bb11d38289fb6",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat:\n  html:\n    code-fold: show\n    code-summary: \"Ocultar código\"\n    code-line-numbers: false\n    code-annotations: false\n    code-link: true\n    code-tools:\n        source: true\n        toggle: true\n        caption: \"Código\"\n    code-overflow: scroll\n    page-layout: full\neditor_options:\n  chunk_output_type: console\ncategories: [\"geom_point\"]\nexecute:\n  eval: false\n  echo: true\n  warning: false\ntitle: \"Día pi\"\ndate: 2025-03-14\nauthor: Víctor Gauto\n---\n\n\n\n\n# {{< iconify hugeicons:pi >}}\n\nEl 14 de marzo se celebra el día {{< iconify hugeicons:pi >}}.\n\nExisten muchas formas de expresar este número.\n\n## Paquetes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(glue)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n## Función\n\nFunción que genera un `tibble` a partir de la cantidad de puntos dada.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf_pi <- function(z) {\n\n  set.seed(2025)\n\n  d <- tibble(\n    x = runif(n = z, min = -1, max = 1),\n    y = runif(n = z, min = -1, max = 1),\n    r = sqrt(x^2 + y^2),\n    estado = if_else(r <= 1, \"in\", \"out\"),\n    grupo = paste0(\"p\", format(z, scientific = FALSE))\n  )\n\n  return(d)\n}\n```\n:::\n\n\n\n\n<!-- # https://en.wikipedia.org/wiki/Pi#Monte_Carlo_methods -->\n\n## Colores y fuentes\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc1 <- \"#E88934\"\nc2 <- \"#1E466E\"\nc3 <- \"grey60\"\nc4 <- \"black\"\n\nc5 <- \"#637B31\"\nc6 <- \"#208CC0\"\nc7 <- \"#7528AF\"\n\nc8 <- \"grey90\"\n```\n:::\n\n\n\n\nFuentes: Ubuntu y JetBrains Mono.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfont_add(\n  family = \"ubuntu\",\n  regular = \"./fuente/Ubuntu-Regular.ttf\",\n  bold = \"./fuente/Ubuntu-Bold.ttf\",\n  italic = \"./fuente/Ubuntu-Italic.ttf\"\n)\n\n# monoespacio & íconos\nfont_add(\n  family = \"jet\",\n  regular = \"./fuente/JetBrainsMonoNLNerdFontMono-Regular.ttf\"\n)\n\nshowtext_auto()\nshowtext_opts(dpi = 300)\n```\n:::\n\n\n\n\n## Epígrafe\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautor <- glue(\"<span style='color:{c2};'>**Víctor Gauto**</span>\")\nicon_twitter <- glue(\"<span style='font-family:jet;'>&#xf099;</span>\")\nicon_instagram <- glue(\"<span style='font-family:jet;'>&#xf16d;</span>\")\nicon_github <- glue(\"<span style='font-family:jet;'>&#xf09b;</span>\")\nicon_mastodon <- glue(\"<span style='font-family:jet;'>&#xf0ad1;</span>\")\nicon_bsky <- glue(\"<span style='font-family:jet;'>&#xe28e;</span>\")\nusuario <- glue(\"<span style='color:{c2};'>**vhgauto**</span>\")\nsep <- glue(\"**|**\")\n\nmi_caption <- glue(\n  \"{autor} {sep} {icon_github} {icon_twitter} {icon_instagram} \",\n  \"{icon_mastodon} {icon_bsky} {usuario}\"\n)\n```\n:::\n\n\n\n\n\n## Datos\n\nSímbolos útiles\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npi_etq <- \"&#xe22c;\"\npunto_etq <- \"&#xf444;\"\nsep_etq <- glue(\" <b style='color: {c3}'>|</b> \")\n```\n:::\n\n\n\n\nGenero la base de datos.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- map(c(1e3, 1e4, 1e5, 1e6), f_pi) |>\n  list_rbind() |>\n  mutate(\n    grupo = fct_inorder(grupo)\n  )\n\n# calculo el valor de pi, error y genero el título para cada panel\ntitulo_tbl <- d |>\n  reframe(\n    pi_aprox = sum(estado == \"in\")/n()*4,\n    .by = grupo\n  ) |>\n  mutate(\n    prob = round(abs((pi_aprox - pi)/pi*100), 3),\n    .by = grupo\n  ) |>\n  mutate(\n    p = as.numeric(sub(\"p\", \"\", grupo))\n  ) |>\n  mutate(\n    etq1 = paste0(\n      format(\n        p, big.mark = \".\", decimal.mark = \",\", scientific = FALSE, trim = TRUE\n      ),\n      punto_etq),\n    etq2 = paste0(\n      pi_etq, \" ≈ \",\n      format(\n        round(pi_aprox, 5),\n        nsmall = 5, big.mark = \".\", decimal.mark = \",\", trim = TRUE\n      )\n    ),\n    etq3 = paste0(\n      format(\n        round(prob, 3),\n        nsmall = 3, big.mark = \"\", decimal.mark = \",\", trim = TRUE\n      ),\n      \"%\"\n    )\n  ) |>\n  mutate(\n    etq1 = glue(\"<span style='color: {c5}'>{etq1}</span>\"),\n    etq2 = glue(\"<span style='color: {c6}'>{etq2}</span>\"),\n    etq3 = glue(\"<span style='color: {c7}'>{etq3}</span>\")\n  ) |>\n  mutate(\n    etq = glue(\"{etq1}{sep_etq}{etq2}{sep_etq}{etq3}\")\n  )\n\nstrip_titulo <- set_names(\n  x = titulo_tbl$etq,\n  nm = titulo_tbl$grupo\n)\n```\n:::\n\n\n\n\n## Figura\n\nEcuación para el título utilizo una expresión en `LaTeX`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neq <- latex2exp::TeX(r\"($\\lim_{n\\to\\infty} \\frac{t}{n} = \\frac{\\pi}{4} $)\")\n```\n:::\n\n\n\n\nSubtítulo y figura.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_subtitulo <- glue(\n  \"*t* es el número de <b style='color: {c1}'>puntos dentro del círculo</b> y\n  <span style='color: {c5}'>*n* es el total</span>,\n  aleatoriamente ubicados.<br>\n  Para cada panel se indican <b style='color: {c5}'>n</b>, el\n  <b style='color: {c6}'>valor aproximado de\n  <span style='font-family: jet'>{pi_etq}</span></b>\n  y el <b style='color: {c7}'>error porcentual</b>.\"\n)\n\ng <- ggplot(d, aes(x, y, color = estado)) +\n  geom_point(\n    size = .1, alpha = .5, show.legend = FALSE\n  ) +\n  facet_wrap(vars(grupo), ncol = 2,\n             labeller = as_labeller(strip_titulo)\n             ) +\n  scale_color_manual(\n    breaks = c(\"in\", \"out\"),\n    values = c(c1, c2)\n  ) +\n  coord_equal(clip = \"off\", expand = FALSE) +\n  labs(\n    title = eq, subtitle = mi_subtitulo, caption = mi_caption\n  ) +\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = c8, color = NA),\n    plot.margin = margin(r = 15, l = 15),\n    plot.title = element_text(\n      family = \"sans serif\", size = 40, hjust = .5, margin = margin(t = 20),\n      color = c2\n    ),\n    plot.subtitle = element_markdown(\n      size = 22, hjust = .5, margin = margin(t = 15, b = 25), lineheight = 1.4\n    ),\n    plot.caption = element_markdown(\n      family = \"ubuntu\", color = c1, size = 15, margin = margin(t = 20, b = 15)\n    ),\n    panel.spacing.x = unit(1, \"cm\"),\n    strip.text = element_markdown(\n      family = \"jet\", size = 15, margin = margin(t = 10, b = 5), color = c4\n    )\n  )\n```\n:::\n\n\n\n\nGuardo la figura creada.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\n  plot = g,\n  filename = paste0(getwd(), \"/viz/pi.png\"),\n  width = 30,\n  height = 37,\n  units = \"cm\"\n)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}